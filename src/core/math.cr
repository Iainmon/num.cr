require "./macros"

module Num
  extend self
  NumInternal.elementwise(:+, add)
  NumInternal.elementwise(:-, subtract)
  NumInternal.elementwise(:*, multiply)
  NumInternal.elementwise(:/, divide)
  NumInternal.elementwise(:**, power)
  NumInternal.elementwise(://, floordiv)
  NumInternal.elementwise(:%, modulo)
  NumInternal.elementwise(:==, equal)
  NumInternal.elementwise(:>, greater)
  NumInternal.elementwise(:>=, greater_equal)
  NumInternal.elementwise(:<, less)
  NumInternal.elementwise(:<=, less_equal)
  NumInternal.elementwise(:&, bitwise_and)
  NumInternal.elementwise(:|, bitwise_or)
  NumInternal.elementwise(:^, bitwise_xor)
  NumInternal.elementwise(:<<, left_shift)
  NumInternal.elementwise(:>>, right_shift)
  NumInternal.stdlibwrap1d acos
  NumInternal.stdlibwrap1d acosh
  NumInternal.stdlibwrap1d asin
  NumInternal.stdlibwrap1d asinh
  NumInternal.stdlibwrap1d atan
  NumInternal.stdlibwrap1d atanh
  NumInternal.stdlibwrap1d besselj0
  NumInternal.stdlibwrap1d besselj1
  NumInternal.stdlibwrap1d bessely0
  NumInternal.stdlibwrap1d bessely1
  NumInternal.stdlibwrap1d cbrt
  NumInternal.stdlibwrap1d cos
  NumInternal.stdlibwrap1d cosh
  NumInternal.stdlibwrap1d erf
  NumInternal.stdlibwrap1d erfc
  NumInternal.stdlibwrap1d exp
  NumInternal.stdlibwrap1d exp2
  NumInternal.stdlibwrap1d expm1
  NumInternal.stdlibwrap1d gamma
  NumInternal.stdlibwrap1d ilogb
  NumInternal.stdlibwrap1d lgamma
  NumInternal.stdlibwrap1d log
  NumInternal.stdlibwrap1d log10
  NumInternal.stdlibwrap1d log1p
  NumInternal.stdlibwrap1d log2
  NumInternal.stdlibwrap1d logb
  NumInternal.stdlibwrap1d sin
  NumInternal.stdlibwrap1d sinh
  NumInternal.stdlibwrap1d sqrt
  NumInternal.stdlibwrap1d tan
  NumInternal.stdlibwrap1d tanh
  NumInternal.stdlibwrap atan2
  NumInternal.stdlibwrap besselj
  NumInternal.stdlibwrap bessely
  NumInternal.stdlibwrap copysign
  NumInternal.stdlibwrap hypot
  NumInternal.stdlibwrap ldexp
  NumInternal.on_number abs

  def outer(a : Tensor, b : Tensor)
    multiply(a.ravel.bc(1), b.ravel.bc(0))
  end
end
