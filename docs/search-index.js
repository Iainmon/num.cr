crystal_doc_search_index_callback({"repository_name":"github.com/crystal-data/bottle","body":"![bottle](https://raw.githubusercontent.com/crystal-data/bottle/master/static/bottle_logo.png)\n\n[![Build Status](https://travis-ci.org/crystal-data/bottle.svg?branch=master)](https://travis-ci.org/crystal-data/bottle) [![Join the chat at https://gitter.im/crystal-data/bottle](https://badges.gitter.im/crystal-data/bottle.svg)](https://gitter.im/crystal-data/bottle?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nBottle is the core shard needed for scientific computing with Crystal\n\n- **Website:** https://www.crystaldata.org\n- **API Documentation:** http://crystaldata.org/bottle\n- **Source code:** https://github.com/crystaldata/bottle\n- **Bug reports:** https://github.com/crystaldata/bottle/issues\n\nIt provides:\n\n- An n-dimensional `Tensor` data structure\n- sophisticated reduction and accumulation routines\n- data structures that can easily be passed to C libraries\n- powerful linear algebra routines backed by LAPACK and BLAS\n\n## Usage\n\nBottle provides data structures that facilitate element-wise operations,\naccumulations, and reductions.  While some operations are backed by BLAS\nand LaPACK, many vectorized operations use iteration written in Crystal.\nThe primary goal of this library was to provide a NumPy like interface in\nCrystal, and performance will be revisited constantly as the library is\nimproved.\n\nInclude `Bottle` to add `Tensor` to the top level namespace,\nas well as provide access to `B`, Bottle's public API, which provides many\npowerful numerical methods.\n\n```crystal\ninclude Bottle\n\nt = Tensor.new([2, 2, 3]) { |i| i }\n\nB.add(t, t) # =>\n# [[[ 0,  2,  4],\n#   [ 6,  8, 10]],\n#\n#  [[12, 14, 16],\n#   [18, 20, 22]]]\n```\n\nBottle provides an n-dimensional Tensor for efficient data storage.\nSlice and index these containers to return views into their data.\n\n```crystal\nt[1...] # =>\n# [[[ 6,  7,  8],\n#   [ 9, 10, 11]]]\n\nt[0] # =>\n# [[0, 1, 2],\n#  [3, 4, 5]]\n\nt[..., 1] # =>\n# [[ 3,  4,  5],\n#  [ 9, 10, 11]]\n\nt[1..., 1...] # =>\n# [[[ 9, 10, 11]]]\n```\n\nMake use of elementwise, outer, and accumulation operations.\n\n```crystal\nB.divide(t[0], t[1]) # =>\n# [[    0.0,   0.143,    0.25],\n#  [  0.333,     0.4,   0.455]]\n\nB.multiply.outer(t[0, 0], t[0, 1]) # =>\n# [[ 0,  0,  0],\n#  [ 3,  4,  5],\n#  [ 6,  8, 10]]\n```\n\nUse Linear Algebra Routines backed by BLAS and LAPACK\n\n```crystal\nB.dot(t[0, 0], t[0, 1]) # => 14.0\n\nB.matmul(t[0, ..., ...2], t[1, ..., ...2]) # =>\n# [[   9.0,   10.0],\n#  [  54.0,   61.0]]\n\nB.inv(t[0, ..., ...2]) # =>\n# [[-1.333, 0.333],\n#  [  1.0,   0.0]]\n\nB.norm(t[0, 1]) # => 7.0710678118654755\n```\n\n\n\n\nContributing\n------------\nBottle requires help in many different ways to continue to grow as a shard.\nContributions such as high level documentation and code quality checks are needed just\nas much as API enhancements.  If you are considering larger scale contributions\nthat extend beyond minor enhancements and bug fixes, contact Crystal Data\nin order to be added to the organization to gain access to review and merge\npermissions.\n","program":{"html_id":"github.com/crystal-data/bottle/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"}],"locations":[],"repository_name":"github.com/crystal-data/bottle","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"}],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/crystal-data/bottle/Bottle","path":"Bottle.html","kind":"module","full_name":"Bottle","name":"Bottle","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/nditer.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr"},{"filename":"bottle.cr","line_number":4,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/bottle.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.2.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","path":"Bottle/B.html","kind":"module","full_name":"Bottle::B","name":"B","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Comparison","kind":"module","full_name":"Bottle::Internal::Comparison","name":"Comparison"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ToString","kind":"module","full_name":"Bottle::Internal::ToString","name":"ToString"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Assemble","kind":"module","full_name":"Bottle::Internal::Assemble","name":"Assemble"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/LinAlg","kind":"module","full_name":"Bottle::Internal::LinAlg","name":"LinAlg"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Trigonometric","kind":"module","full_name":"Bottle::Internal::Trigonometric","name":"Trigonometric"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Statistics","kind":"module","full_name":"Bottle::Internal::Statistics","name":"Statistics"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Numeric","kind":"module","full_name":"Bottle::Internal::Numeric","name":"Numeric"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/UFunc","kind":"module","full_name":"Bottle::Internal::UFunc","name":"UFunc"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Binary","kind":"module","full_name":"Bottle::Internal::Binary","name":"Binary"}],"locations":[{"filename":"api.cr","line_number":12,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/api.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Assemble","kind":"module","full_name":"Bottle::Internal::Assemble","name":"Assemble"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Binary","kind":"module","full_name":"Bottle::Internal::Binary","name":"Binary"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Comparison","kind":"module","full_name":"Bottle::Internal::Comparison","name":"Comparison"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/LinAlg","kind":"module","full_name":"Bottle::Internal::LinAlg","name":"LinAlg"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Numeric","kind":"module","full_name":"Bottle::Internal::Numeric","name":"Numeric"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Statistics","kind":"module","full_name":"Bottle::Internal::Statistics","name":"Statistics"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ToString","kind":"module","full_name":"Bottle::Internal::ToString","name":"ToString"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Trigonometric","kind":"module","full_name":"Bottle::Internal::Trigonometric","name":"Trigonometric"},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/UFunc","kind":"module","full_name":"Bottle::Internal::UFunc","name":"UFunc"}],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions","path":"Bottle/Exceptions.html","kind":"module","full_name":"Bottle::Exceptions","name":"Exceptions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"util/exceptions.cr","line_number":1,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/util/exceptions.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions/RangeError","path":"Bottle/Exceptions/RangeError.html","kind":"class","full_name":"Bottle::Exceptions::RangeError","name":"RangeError","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/crystal-data/bottle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"util/exceptions.cr","line_number":2,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/util/exceptions.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions","kind":"module","full_name":"Bottle::Exceptions","name":"Exceptions"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions/ShapeError","path":"Bottle/Exceptions/ShapeError.html","kind":"class","full_name":"Bottle::Exceptions::ShapeError","name":"ShapeError","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/crystal-data/bottle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"util/exceptions.cr","line_number":5,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/util/exceptions.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions","kind":"module","full_name":"Bottle::Exceptions","name":"Exceptions"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions/TypeError","path":"Bottle/Exceptions/TypeError.html","kind":"class","full_name":"Bottle::Exceptions::TypeError","name":"TypeError","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"github.com/crystal-data/bottle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"util/exceptions.cr","line_number":8,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/util/exceptions.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Exceptions","kind":"module","full_name":"Bottle::Exceptions","name":"Exceptions"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","path":"Bottle/Internal.html","kind":"module","full_name":"Bottle::Internal","name":"Internal","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/nditer.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/Tensor","kind":"struct","full_name":"Bottle::Tensor(T)","name":"Tensor"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ArrayFlags","path":"Bottle/Internal/ArrayFlags.html","kind":"enum","full_name":"Bottle::Internal::ArrayFlags","name":"ArrayFlags","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/crystal-data/bottle/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"github.com/crystal-data/bottle/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/crystal-data/bottle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core/ndtensor.cr","line_number":6,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":true,"alias":false,"aliased":"","const":false,"constants":[{"id":"Contiguous","name":"Contiguous","value":"1","doc":"Contiguous really means C-style contiguious.  The\ncontiguous part means that there are no 'skipped\nelements'.  That is, that a flat_iter over the array will\ntouch every location in memory from the location of the\nfirst element to that of the last element.  The C-style\npart means that the data is laid out such that the last index\nis the fastest varying as one scans though the array's\nmemory.","summary":"<p>Contiguous really means C-style contiguious.</p>"},{"id":"Fortran","name":"Fortran","value":"2","doc":"Fortran really means Fortran-style contiguious.  The\ncontiguous part means that there are no 'skipped\nelements'.  That is, that a flat_iter over the array will\ntouch every location in memory from the location of the\nfirst element to that of the last element.  The Fortran-style\npart means that the data is laid out such that the first index\nis the fastest varying as one scans though the array's\nmemory.","summary":"<p>Fortran really means Fortran-style contiguious.</p>"},{"id":"OwnData","name":"OwnData","value":"4","doc":"OwnData indicates if this array is the owner of the data\npointed to by its .ptr property.  If not then this is a\nview onto some other array's data.","summary":"<p>OwnData indicates if this array is the owner of the data pointed to by its .ptr property.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"contiguous?-instance-method","html_id":"contiguous?-instance-method","name":"contiguous?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L15","def":{"name":"contiguous?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Contiguous)"}},{"id":"fortran?-instance-method","html_id":"fortran?-instance-method","name":"fortran?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L24","def":{"name":"fortran?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Fortran)"}},{"id":"none?-instance-method","html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L6","def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value == 0"}},{"id":"own_data?-instance-method","html_id":"own_data?-instance-method","name":"own_data?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L28","def":{"name":"own_data?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(OwnData)"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Assemble","path":"Bottle/Internal/Assemble.html","kind":"module","full_name":"Bottle::Internal::Assemble","name":"Assemble","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/assemble.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/assemble.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Assemble","kind":"module","full_name":"Bottle::Internal::Assemble","name":"Assemble"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"concatenate(alist:Array(Bottle::Tensor(U)),axis:Int32)forallU-instance-method","html_id":"concatenate(alist:Array(Bottle::Tensor(U)),axis:Int32)forallU-instance-method","name":"concatenate","doc":"Concatenates an array of `Tensor's` along a provided axis.\n\n```\nt = Tensor.new([2, 2, 3]) { |i| i }\n\nconcatenate([t, t, t], axis=-1)\nTensor([[[ 0,  1,  2,  0,  1,  2,  0,  1,  2],\n         [ 3,  4,  5,  3,  4,  5,  3,  4,  5]],\n\n        [[ 6,  7,  8,  6,  7,  8,  6,  7,  8],\n         [ 9, 10, 11,  9, 10, 11,  9, 10, 11]]])\n```","summary":"<p>Concatenates an array of <code><a href=\"../../Bottle/Tensor.html\">Tensor</a>'s</code> along a provided axis.</p>","abstract":false,"args":[{"name":"alist","doc":null,"default_value":"","external_name":"alist","restriction":"Array(Tensor(U))"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"args_string":"(alist : Array(Bottle::Tensor(U)), axis : Int32) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/assemble.cr#L18","def":{"name":"concatenate","args":[{"name":"alist","doc":null,"default_value":"","external_name":"alist","restriction":"Array(Tensor(U))"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"newshape = alist[0].shape.dup\nif axis < 0\n  axis = axis + newshape.size\nend\nif axis < 0 || axis > newshape.size\n  raise(\"Axis out of range\")\nend\nnewshape[axis] = 0\nalist.each do |v|\n  if (  v.shape.size != newshape.size)\n    raise(\"All inputs must have the same number of axes\")\n  end\n  newshape.size.times do |i|\n    if (    (i != axis) && (v.shape[i] != newshape[i]))\n      raise(\"All inputs must have the same shape off-axis\")\n    end\n  end\n  __temp_36 = axis\n  newshape[__temp_36] = newshape[__temp_36] + v.shape[axis]\nend\nret = Tensor(U).new(newshape)\nlo = [0] * newshape.size\nhi = newshape.dup\nhi[axis] = 0\nalist.each do |v|\n  if (  v.shape[axis] != 0)\n    __temp_38 = axis\n    hi[__temp_38] = hi[__temp_38] + v.shape[axis]\n    ranges = (lo.zip(hi)).map do |i, j|\n      i...j\n    end\n    ret[ranges] = v\n    lo[axis] = hi[axis]\n  end\nend\nret\n"}},{"id":"hstack(alist:Array(Bottle::Tensor(U)))forallU-instance-method","html_id":"hstack(alist:Array(Bottle::Tensor(U)))forallU-instance-method","name":"hstack","doc":"Concatenates a list of `Tensor`s along axis 1\n\n```\nt = Tensor.new([2, 2, 3])\nhstack([t, t, t])\nTensor([[[ 0,  1,  2],\n         [ 3,  4,  5],\n         [ 0,  1,  2],\n         [ 3,  4,  5],\n         [ 0,  1,  2],\n         [ 3,  4,  5]],\n\n        [[ 6,  7,  8],\n         [ 9, 10, 11],\n         [ 6,  7,  8],\n         [ 9, 10, 11],\n         [ 6,  7,  8],\n         [ 9, 10, 11]]])\n```","summary":"<p>Concatenates a list of <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s along axis 1</p>","abstract":false,"args":[{"name":"alist","doc":null,"default_value":"","external_name":"alist","restriction":"Array(Tensor(U))"}],"args_string":"(alist : Array(Bottle::Tensor(U))) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/assemble.cr#L102","def":{"name":"hstack","args":[{"name":"alist","doc":null,"default_value":"","external_name":"alist","restriction":"Array(Tensor(U))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"concatenate(alist, 1)"}},{"id":"vstack(alist:Array(Bottle::Tensor(U)))forallU-instance-method","html_id":"vstack(alist:Array(Bottle::Tensor(U)))forallU-instance-method","name":"vstack","doc":"Concatenates a list of `Tensor`s along axis 0\n\n```\nt = Tensor.new([2, 2, 3])\nvstack([t, t, t])\nTensor([[[ 0,  1,  2],\n         [ 3,  4,  5]],\n\n        [[ 6,  7,  8],\n         [ 9, 10, 11]],\n\n        [[ 0,  1,  2],\n         [ 3,  4,  5]],\n\n        [[ 6,  7,  8],\n         [ 9, 10, 11]],\n\n        [[ 0,  1,  2],\n         [ 3,  4,  5]],\n\n        [[ 6,  7,  8],\n         [ 9, 10, 11]]])\n```","summary":"<p>Concatenates a list of <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s along axis 0</p>","abstract":false,"args":[{"name":"alist","doc":null,"default_value":"","external_name":"alist","restriction":"Array(Tensor(U))"}],"args_string":"(alist : Array(Bottle::Tensor(U))) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/assemble.cr#L79","def":{"name":"vstack","args":[{"name":"alist","doc":null,"default_value":"","external_name":"alist","restriction":"Array(Tensor(U))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"concatenate(alist, 0)"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Binary","path":"Bottle/Internal/Binary.html","kind":"module","full_name":"Bottle::Internal::Binary","name":"Binary","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/binary.cr","line_number":4,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Binary","kind":"module","full_name":"Bottle::Internal::Binary","name":"Binary"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"bitwise_and(x1:Tensor,x2:Tensor)-instance-method","html_id":"bitwise_and(x1:Tensor,x2:Tensor)-instance-method","name":"bitwise_and","doc":"bitwise_ands two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.bitwise_and(t1, t2)\n```","summary":"<p>bitwise_ands two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L58","def":{"name":"bitwise_and","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value & i2.next.value\nend\n"}},{"id":"bitwise_and(x1:Tensor,x2:Number)-instance-method","html_id":"bitwise_and(x1:Tensor,x2:Number)-instance-method","name":"bitwise_and","doc":"bitwise_ands a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.bitwise_and(t1, t2)\n```","summary":"<p>bitwise_ands a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L58","def":{"name":"bitwise_and","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value & x2\nend\n"}},{"id":"bitwise_and(x1:Number,x2:Tensor)-instance-method","html_id":"bitwise_and(x1:Number,x2:Tensor)-instance-method","name":"bitwise_and","doc":"bitwise_ands a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.bitwise_and(x, t)\n```","summary":"<p>bitwise_ands a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L58","def":{"name":"bitwise_and","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 & ret.next.value\nend\n"}},{"id":"bitwise_or(x1:Tensor,x2:Tensor)-instance-method","html_id":"bitwise_or(x1:Tensor,x2:Tensor)-instance-method","name":"bitwise_or","doc":"bitwise_ors two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.bitwise_or(t1, t2)\n```","summary":"<p>bitwise_ors two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L59","def":{"name":"bitwise_or","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value | i2.next.value\nend\n"}},{"id":"bitwise_or(x1:Tensor,x2:Number)-instance-method","html_id":"bitwise_or(x1:Tensor,x2:Number)-instance-method","name":"bitwise_or","doc":"bitwise_ors a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.bitwise_or(t1, t2)\n```","summary":"<p>bitwise_ors a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L59","def":{"name":"bitwise_or","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value | x2\nend\n"}},{"id":"bitwise_or(x1:Number,x2:Tensor)-instance-method","html_id":"bitwise_or(x1:Number,x2:Tensor)-instance-method","name":"bitwise_or","doc":"bitwise_ors a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.bitwise_or(x, t)\n```","summary":"<p>bitwise_ors a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L59","def":{"name":"bitwise_or","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 | ret.next.value\nend\n"}},{"id":"bitwise_xor(x1:Tensor,x2:Tensor)-instance-method","html_id":"bitwise_xor(x1:Tensor,x2:Tensor)-instance-method","name":"bitwise_xor","doc":"bitwise_xors two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.bitwise_xor(t1, t2)\n```","summary":"<p>bitwise_xors two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L60","def":{"name":"bitwise_xor","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value ^ i2.next.value\nend\n"}},{"id":"bitwise_xor(x1:Tensor,x2:Number)-instance-method","html_id":"bitwise_xor(x1:Tensor,x2:Number)-instance-method","name":"bitwise_xor","doc":"bitwise_xors a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.bitwise_xor(t1, t2)\n```","summary":"<p>bitwise_xors a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L60","def":{"name":"bitwise_xor","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value ^ x2\nend\n"}},{"id":"bitwise_xor(x1:Number,x2:Tensor)-instance-method","html_id":"bitwise_xor(x1:Number,x2:Tensor)-instance-method","name":"bitwise_xor","doc":"bitwise_xors a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.bitwise_xor(x, t)\n```","summary":"<p>bitwise_xors a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L60","def":{"name":"bitwise_xor","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 ^ ret.next.value\nend\n"}},{"id":"left_shift(x1:Tensor,x2:Tensor)-instance-method","html_id":"left_shift(x1:Tensor,x2:Tensor)-instance-method","name":"left_shift","doc":"left_shifts two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.left_shift(t1, t2)\n```","summary":"<p>left_shifts two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L61","def":{"name":"left_shift","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value << i2.next.value\nend\n"}},{"id":"left_shift(x1:Tensor,x2:Number)-instance-method","html_id":"left_shift(x1:Tensor,x2:Number)-instance-method","name":"left_shift","doc":"left_shifts a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.left_shift(t1, t2)\n```","summary":"<p>left_shifts a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L61","def":{"name":"left_shift","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value << x2\nend\n"}},{"id":"left_shift(x1:Number,x2:Tensor)-instance-method","html_id":"left_shift(x1:Number,x2:Tensor)-instance-method","name":"left_shift","doc":"left_shifts a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.left_shift(x, t)\n```","summary":"<p>left_shifts a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L61","def":{"name":"left_shift","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 << ret.next.value\nend\n"}},{"id":"right_shift(x1:Tensor,x2:Tensor)-instance-method","html_id":"right_shift(x1:Tensor,x2:Tensor)-instance-method","name":"right_shift","doc":"right_shifts two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.right_shift(t1, t2)\n```","summary":"<p>right_shifts two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L62","def":{"name":"right_shift","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value >> i2.next.value\nend\n"}},{"id":"right_shift(x1:Tensor,x2:Number)-instance-method","html_id":"right_shift(x1:Tensor,x2:Number)-instance-method","name":"right_shift","doc":"right_shifts a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.right_shift(t1, t2)\n```","summary":"<p>right_shifts a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L62","def":{"name":"right_shift","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value >> x2\nend\n"}},{"id":"right_shift(x1:Number,x2:Tensor)-instance-method","html_id":"right_shift(x1:Number,x2:Tensor)-instance-method","name":"right_shift","doc":"right_shifts a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.right_shift(x, t)\n```","summary":"<p>right_shifts a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L62","def":{"name":"right_shift","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 >> ret.next.value\nend\n"}}],"macros":[{"id":"binary_op(operator,name)-macro","html_id":"binary_op(operator,name)-macro","name":"binary_op","doc":null,"summary":null,"abstract":false,"args":[{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(operator, name)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/binary.cr#L7","def":{"name":"binary_op","args":[{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# \n{{ name }}\ns two tensors with each other elementwise\n\n    \n#\n\n    \n# ```\n\n    \n# t1 = Tensor.new [1, 2, 3]\n\n    \n# t2 = Tensor.new [4, 5, 6]\n\n    \n#\n\n    \n# B.\n{{ name }}\n(t1, t2)\n\n    \n# ```\n\n    def \n{{ name }}\n(x1 : Tensor, x2 : Tensor)\n      if x1.shape != x2.shape\n        raise \"Shapes \n{#{x1.shape}} and \n{#{x2.shape} are not aligned\"\n      \nend\n      i1 = x1.unsafe_iter\n      i2 = x2.unsafe_iter\n      Tensor.new(x1.shape) do |_|\n        i1.next.value \n{{ operator.id }}\n i2.next.value\n      \nend\n    \nend\n\n    \n# \n{{ name }}\ns a tensor with a scalar elementwise.\n\n    \n#\n\n    \n# ```\n\n    \n# t1 = Tensor.new [1, 2, 3]\n\n    \n# t2 = 5\n\n    \n#\n\n    \n# B.\n{{ name }}\n(t1, t2)\n\n    \n# ```\n\n    def \n{{ name }}\n(x1 : Tensor, x2 : Number)\n      ret = x1.unsafe_iter\n      Tensor.new(x1.shape) do |_|\n        ret.next.value \n{{ operator.id }}\n x2\n      \nend\n    \nend\n\n    \n# \n{{ name }}\ns a scalar with a tensor elementwise.\n\n    \n#\n\n    \n# ```\n\n    \n# x = 5\n\n    \n# t = Tensor.new [1, 2, 3]\n\n    \n#\n\n    \n# B.\n{{ name }}\n(x, t)\n\n    \n# ```\n\n    def \n{{ name }}\n(x1 : Number, x2 : Tensor)\n      ret = x2.unsafe_iter\n      Tensor.new(x2.shape) do |_|\n        x1 \n{{ operator.id }}\n ret.next.value\n      \nend\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Comparison","path":"Bottle/Internal/Comparison.html","kind":"module","full_name":"Bottle::Internal::Comparison","name":"Comparison","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"util/testing.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/util/testing.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Comparison","kind":"module","full_name":"Bottle::Internal::Comparison","name":"Comparison"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"allclose(a:Bottle::Tensor(U),b:Bottle::Tensor(U),rtol=1e-5,atol=1e-8)forallU-instance-method","html_id":"allclose(a:Bottle::Tensor(U),b:Bottle::Tensor(U),rtol=1e-5,atol=1e-8)forallU-instance-method","name":"allclose","doc":"Asserts that two equally shaped `Tensor`s are equal within a provided\ntolerance.  Useful for floating point comparison where direct equality might\nnot work\n\n```\nt = Tensor.new([2, 2, 3]) { |i| i * 1.0 }\ntf = t + 0.00000000001\nallclose(t, tf) # => true\n```","summary":"<p>Asserts that two equally shaped <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s are equal within a provided tolerance.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Tensor(U)"},{"name":"rtol","doc":null,"default_value":"1e-5","external_name":"rtol","restriction":""},{"name":"atol","doc":null,"default_value":"1e-8","external_name":"atol","restriction":""}],"args_string":"(a : Bottle::Tensor(U), b : Bottle::Tensor(U), rtol = <span class=\"n\">1e-5</span>, atol = <span class=\"n\">1e-8</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/util/testing.cr#L15","def":{"name":"allclose","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Tensor(U)"},{"name":"rtol","doc":null,"default_value":"1e-5","external_name":"rtol","restriction":""},{"name":"atol","doc":null,"default_value":"1e-8","external_name":"atol","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if a.shape != b.shape\n  raise(\"Shape of arguments must match\")\nend\niter_a = a.flat_iter\niter_b = b.flat_iter\nif (rtol > 0)\n  iter_a.zip(iter_b) do |i, j|\n    c = (i.value - j.value).abs > (atol + (rtol * j.value.abs))\n    if !c\n    else\n      return false\n    end\n  end\nelse\n  iter_a.zip(iter_b) do |i, j|\n    c = (i.value - j.value).abs > atol\n    if !c\n    else\n      return false\n    end\n  end\nend\ntrue\n"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ContigIter","path":"Bottle/Internal/ContigIter.html","kind":"struct","full_name":"Bottle::Internal::ContigIter(T)","name":"ContigIter","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/crystal-data/bottle/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/crystal-data/bottle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"iteration/iter.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/iteration/iter.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(t:Bottle::Tensor(T),transpose:Bool=false)-class-method","html_id":"new(t:Bottle::Tensor(T),transpose:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Tensor(T)"},{"name":"transpose","doc":null,"default_value":"false","external_name":"transpose","restriction":"Bool"}],"args_string":"(t : Bottle::Tensor(T), transpose : Bool = <span class=\"n\">false</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/iteration/iter.cr#L11","def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Tensor(T)"},{"name":"transpose","doc":null,"default_value":"false","external_name":"transpose","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = ContigIter(T).allocate\n_.initialize(t, transpose)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/iteration/iter.cr#L16","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @done\n  return stop\nend\nlast = @p_item\n@transpose ? _increment_idx_trans : _increment_idx\nlast\n"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","path":"Bottle/Internal/Dtype.html","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":1,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/BNum","path":"Bottle/Internal/Dtype/BNum.html","kind":"alias","full_name":"Bottle::Internal::Dtype::BNum","name":"BNum","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":10,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"(Float32 | Float64 | Int32)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/Double","path":"Bottle/Internal/Dtype/Double.html","kind":"alias","full_name":"Bottle::Internal::Dtype::Double","name":"Double","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":4,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"Float64","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/Ftnlen","path":"Bottle/Internal/Dtype/Ftnlen.html","kind":"alias","full_name":"Bottle::Internal::Dtype::Ftnlen","name":"Ftnlen","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":6,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"Int32","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/Indexer","path":"Bottle/Internal/Dtype/Indexer.html","kind":"alias","full_name":"Bottle::Internal::Dtype::Indexer","name":"Indexer","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":9,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"(Int32 | UInt64)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/Integer","path":"Bottle/Internal/Dtype/Integer.html","kind":"alias","full_name":"Bottle::Internal::Dtype::Integer","name":"Integer","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":2,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"Int32","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/LFp","path":"Bottle/Internal/Dtype/LFp.html","kind":"alias","full_name":"Bottle::Internal::Dtype::LFp","name":"LFp","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":7,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"Pointer(Void)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/Logical","path":"Bottle/Internal/Dtype/Logical.html","kind":"alias","full_name":"Bottle::Internal::Dtype::Logical","name":"Logical","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":5,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"UInt8","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/Real","path":"Bottle/Internal/Dtype/Real.html","kind":"alias","full_name":"Bottle::Internal::Dtype::Real","name":"Real","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"Float32","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype/UInt","path":"Bottle/Internal/Dtype/UInt.html","kind":"alias","full_name":"Bottle::Internal::Dtype::UInt","name":"UInt","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"libs/dtype.cr","line_number":8,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/libs/dtype.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":true,"aliased":"UInt64","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Dtype","kind":"module","full_name":"Bottle::Internal::Dtype","name":"Dtype"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/FlatIter","path":"Bottle/Internal/FlatIter.html","kind":"struct","full_name":"Bottle::Internal::FlatIter(T)","name":"FlatIter","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/crystal-data/bottle/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/crystal-data/bottle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core/nditer.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(t:Bottle::Tensor(T))-class-method","html_id":"new(t:Bottle::Tensor(T))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Tensor(T)"}],"args_string":"(t : Bottle::Tensor(T))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L32","def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Tensor(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = FlatIter(T).allocate\n_.initialize(t)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L43","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @done\n  return stop\nend\nv = @ndims - 1\nnext_index = @next_index\n@last_index = next_index\nv.step(to: 0, by: -1) do |i|\n  __temp_24 = i\n  @track[__temp_24] = @track[__temp_24] + 1\n  shape_i = @shape[i]\n  stride_i = @strides[i]\n  if @track[i] == shape_i\n    if i == 0\n      @done = true\n    end\n    @track[i] = 0\n    next_index = next_index - ((shape_i - 1) * stride_i)\n    next\n  end\n  next_index = next_index + stride_i\n  break\nend\n@next_index = next_index\n@last_index\n"}},{"id":"rewind(buffer:Pointer(T))-instance-method","html_id":"rewind(buffer:Pointer(T))-instance-method","name":"rewind","doc":null,"summary":null,"abstract":false,"args":[{"name":"buffer","doc":null,"default_value":"","external_name":"buffer","restriction":"Pointer(T)"}],"args_string":"(buffer : Pointer(T))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L72","def":{"name":"rewind","args":[{"name":"buffer","doc":null,"default_value":"","external_name":"buffer","restriction":"Pointer(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@done = false\n@track = Pointer(Int32).malloc(@ndims, 0)\n@last_index = @buffer\n@next_index = @buffer\n"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/LinAlg","path":"Bottle/Internal/LinAlg.html","kind":"module","full_name":"Bottle::Internal::LinAlg","name":"LinAlg","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"linalg/fixed_dimension.cr","line_number":5,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"dot(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64))-instance-method","html_id":"dot(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64))-instance-method","name":"dot","doc":"Dot product of two `Tensor`s. Specifically, this is the inner\nproduct of two `Tensor`s without the complex conjugate.\n\n```\nt = Tensor.new [1.0, 2.0, 3.0]\n\ndot(t, t) # => 14.0\n```","summary":"<p>Dot product of two <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"}],"args_string":"(dx : Bottle::Tensor(Float64), dy : Bottle::Tensor(Float64))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L202","def":{"name":"dot","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if dx.shape != dy.shape\n  raise(\"Shapes #{dx.shape} and #{dy.shape} are not aligned\")\nend\nif dx.ndims > 1\n  raise(\"Only one-dimension tensors are supported\")\nend\nLibCblas.ddot(dx.size, dx.@buffer, dx.strides[0], dy.@buffer, dy.strides[0])\n"}},{"id":"dot(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32))-instance-method","html_id":"dot(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32))-instance-method","name":"dot","doc":"Dot product of two `Tensor`s. Specifically, this is the inner\nproduct of two `Tensor`s without the complex conjugate.\n\n```\nt = Tensor.new [1.0, 2.0, 3.0]\n\ndot(t, t) # => 14.0\n```","summary":"<p>Dot product of two <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"}],"args_string":"(dx : Bottle::Tensor(Float32), dy : Bottle::Tensor(Float32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L203","def":{"name":"dot","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if dx.shape != dy.shape\n  raise(\"Shapes #{dx.shape} and #{dy.shape} are not aligned\")\nend\nif dx.ndims > 1\n  raise(\"Only one-dimension tensors are supported\")\nend\nLibCblas.sdot(dx.size, dx.@buffer, dx.strides[0], dy.@buffer, dy.strides[0])\n"}},{"id":"inner(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64))-instance-method","html_id":"inner(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64))-instance-method","name":"inner","doc":"Inner product of two `Tensor`s without the complex conjugate.\n\n```\nt = Tensor.new [1.0, 2.0, 3.0]\n\ninner(t, t) # => 14.0\n```","summary":"<p>Inner product of two <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s without the complex conjugate.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"}],"args_string":"(dx : Bottle::Tensor(Float64), dy : Bottle::Tensor(Float64))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L218","def":{"name":"inner","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dot(dx, dy)"}},{"id":"inner(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32))-instance-method","html_id":"inner(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32))-instance-method","name":"inner","doc":"Inner product of two `Tensor`s without the complex conjugate.\n\n```\nt = Tensor.new [1.0, 2.0, 3.0]\n\ninner(t, t) # => 14.0\n```","summary":"<p>Inner product of two <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s without the complex conjugate.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"}],"args_string":"(dx : Bottle::Tensor(Float32), dy : Bottle::Tensor(Float32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L219","def":{"name":"inner","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"dot(dx, dy)"}},{"id":"inv(a:Bottle::Tensor(Float64))-instance-method","html_id":"inv(a:Bottle::Tensor(Float64))-instance-method","name":"inv","doc":"Compute the (multiplicative) inverse of a `Matrix.\n\nGiven a square matrix a, return the matrix ainv satisfying\ndot(a, ainv) = dot(ainv, a) = eye(a.shape[0]).\n\n```\nm = Matrix.new [[1.0, 2.0], [3.0, 4.0]]\n\ninv(m)\n\n# Matrix[[    -2.0     1.0]\n#        [     1.5    -0.5]]\n```","summary":"<p>Compute the (multiplicative) inverse of a `Matrix.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(Float64)"}],"args_string":"(a : Bottle::Tensor(Float64))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L222","def":{"name":"inv","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(Float64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if a.shape[0] != a.shape[1]\n  raise(\"Matrix must be square\")\nend\nif a.ndims > 2\n  raise(\"Only 2 dimensional square matrices are supported\")\nend\na = a.dup\ndim = a.shape[0]\nipiv = Pointer(Int32).malloc(dim)\nm = a.shape[0]\nn = a.shape[1]\nlda = a.strides[0]\nLibLapack.dgetrf(pointerof(m), pointerof(n), a.@buffer, pointerof(lda), ipiv, out info)\norder = dim\nlwork = m * n\nwork = Pointer(Float64).malloc(lwork)\nLibLapack.dgetri(pointerof(order), a.@buffer, pointerof(lda), ipiv, work, pointerof(lwork), out invinfo)\nreturn a\n"}},{"id":"inv(a:Bottle::Tensor(Float32))-instance-method","html_id":"inv(a:Bottle::Tensor(Float32))-instance-method","name":"inv","doc":"Compute the (multiplicative) inverse of a `Matrix.\n\nGiven a square matrix a, return the matrix ainv satisfying\ndot(a, ainv) = dot(ainv, a) = eye(a.shape[0]).\n\n```\nm = Matrix.new [[1.0, 2.0], [3.0, 4.0]]\n\ninv(m)\n\n# Matrix[[    -2.0     1.0]\n#        [     1.5    -0.5]]\n```","summary":"<p>Compute the (multiplicative) inverse of a `Matrix.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(Float32)"}],"args_string":"(a : Bottle::Tensor(Float32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L223","def":{"name":"inv","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(Float32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if a.shape[0] != a.shape[1]\n  raise(\"Matrix must be square\")\nend\nif a.ndims > 2\n  raise(\"Only 2 dimensional square matrices are supported\")\nend\na = a.dup\ndim = a.shape[0]\nipiv = Pointer(Int32).malloc(dim)\nm = a.shape[0]\nn = a.shape[1]\nlda = a.strides[0]\nLibLapack.sgetrf(pointerof(m), pointerof(n), a.@buffer, pointerof(lda), ipiv, out info)\norder = dim\nlwork = m * n\nwork = Pointer(Float32).malloc(lwork)\nLibLapack.sgetri(pointerof(order), a.@buffer, pointerof(lda), ipiv, work, pointerof(lwork), out invinfo)\nreturn a\n"}},{"id":"matmul(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64),dest:Bottle::Tensor(Float64)?=nil)-instance-method","html_id":"matmul(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64),dest:Bottle::Tensor(Float64)?=nil)-instance-method","name":"matmul","doc":"Computes the Matrix product of two matrices.\n\n```\nm = Matrix.new [[1.0, 2.0], [3.0, 4.0]]\nmatmul(m, m)\n\n# Matrix[[      7.0     10.0]\n#        [     15.0     22.0]]\n```","summary":"<p>Computes the Matrix product of two matrices.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"},{"name":"dest","doc":null,"default_value":"nil","external_name":"dest","restriction":"Tensor(Float64) | ::Nil"}],"args_string":"(dx : Bottle::Tensor(Float64), dy : Bottle::Tensor(Float64), dest : Bottle::Tensor(Float64)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L202","def":{"name":"matmul","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"},{"name":"dest","doc":null,"default_value":"nil","external_name":"dest","restriction":"Tensor(Float64) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if dx.shape[1] != dy.shape[0]\n  raise(\"Matrices cannot be multiplied together\")\nend\nif dx.ndims > 2\n  raise(\"Only two dimensional tensors are currently supported\")\nend\nif dest.nil?\n  m = Tensor(Float64).new([dx.shape[0], dy.shape[1]])\nelse\n  m = dest.as(Tensor(Float64))\nend\nLibCblas.dgemm(LibCblas::MatrixLayout::RowMajor, LibCblas::MatrixTranspose::NoTrans, LibCblas::MatrixTranspose::NoTrans, dx.shape[0], dy.shape[1], dx.shape[1], Float64.new(1), dx.@buffer, dx.strides[0], dy.@buffer, dy.strides[0], Float64.new(0), m.@buffer, m.strides[0])\nm\n"}},{"id":"matmul(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32),dest:Bottle::Tensor(Float32)?=nil)-instance-method","html_id":"matmul(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32),dest:Bottle::Tensor(Float32)?=nil)-instance-method","name":"matmul","doc":"Computes the Matrix product of two matrices.\n\n```\nm = Matrix.new [[1.0, 2.0], [3.0, 4.0]]\nmatmul(m, m)\n\n# Matrix[[      7.0     10.0]\n#        [     15.0     22.0]]\n```","summary":"<p>Computes the Matrix product of two matrices.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"},{"name":"dest","doc":null,"default_value":"nil","external_name":"dest","restriction":"Tensor(Float32) | ::Nil"}],"args_string":"(dx : Bottle::Tensor(Float32), dy : Bottle::Tensor(Float32), dest : Bottle::Tensor(Float32)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L203","def":{"name":"matmul","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"},{"name":"dest","doc":null,"default_value":"nil","external_name":"dest","restriction":"Tensor(Float32) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if dx.shape[1] != dy.shape[0]\n  raise(\"Matrices cannot be multiplied together\")\nend\nif dx.ndims > 2\n  raise(\"Only two dimensional tensors are currently supported\")\nend\nif dest.nil?\n  m = Tensor(Float32).new([dx.shape[0], dy.shape[1]])\nelse\n  m = dest.as(Tensor(Float32))\nend\nLibCblas.sgemm(LibCblas::MatrixLayout::RowMajor, LibCblas::MatrixTranspose::NoTrans, LibCblas::MatrixTranspose::NoTrans, dx.shape[0], dy.shape[1], dx.shape[1], Float32.new(1), dx.@buffer, dx.strides[0], dy.@buffer, dy.strides[0], Float32.new(0), m.@buffer, m.strides[0])\nm\n"}},{"id":"norm(x:Bottle::Tensor(Float64))-instance-method","html_id":"norm(x:Bottle::Tensor(Float64))-instance-method","name":"norm","doc":"Returns the euclidean norm of a vector via the function\nname, so that\n\nnorm(x) := sqrt( x'*x )\n\n```\nt = Tensor.new [1.0, 2.0, 3.0]\n\nnorm(t) # => 3.7416573867739413\n```","summary":"<p>Returns the euclidean norm of a vector via the function name, so that</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Tensor(Float64)"}],"args_string":"(x : Bottle::Tensor(Float64))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L202","def":{"name":"norm","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Tensor(Float64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x.ndims > 1\n  raise(\"Only one-dimensional tensors are supported\")\nend\nLibCblas.dnrm2(x.size, x.@buffer, x.strides[0])\n"}},{"id":"norm(x:Bottle::Tensor(Float32))-instance-method","html_id":"norm(x:Bottle::Tensor(Float32))-instance-method","name":"norm","doc":"Returns the euclidean norm of a vector via the function\nname, so that\n\nnorm(x) := sqrt( x'*x )\n\n```\nt = Tensor.new [1.0, 2.0, 3.0]\n\nnorm(t) # => 3.7416573867739413\n```","summary":"<p>Returns the euclidean norm of a vector via the function name, so that</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Tensor(Float32)"}],"args_string":"(x : Bottle::Tensor(Float32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L203","def":{"name":"norm","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Tensor(Float32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x.ndims > 1\n  raise(\"Only one-dimensional tensors are supported\")\nend\nLibCblas.snrm2(x.size, x.@buffer, x.strides[0])\n"}},{"id":"outer(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64))-instance-method","html_id":"outer(dx:Bottle::Tensor(Float64),dy:Bottle::Tensor(Float64))-instance-method","name":"outer","doc":"Compute the outer product of two `Tensor`s.\n\nGiven two vectors, `a = [a0, a1, ..., aM]` and\n`b = [b0, b1, ..., bN]`, the outer product is:\n\n```\n# [[a0*b0  a0*b1 ... a0*bN ]\n#  [a1*b0    .\n#  [ ...          .\n#  [aM*b0            aM*bN ]]\n```","summary":"<p>Compute the outer product of two <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"}],"args_string":"(dx : Bottle::Tensor(Float64), dy : Bottle::Tensor(Float64))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L202","def":{"name":"outer","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float64)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float64)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if dx.shape != dy.shape\n  raise(\"Shapes #{dx.shape} and #{dy.shape} are not aligned\")\nend\nif dx.ndims > 1\n  raise(\"Only one-dimension tensors are supported\")\nend\nm = Tensor(Float64).new([dx.shape[0], dy.shape[0]])\nLibCblas.dger(LibCblas::MatrixLayout::RowMajor, dx.size, dy.size, Float64.new(1), dx.@buffer, dx.strides[0], dy.@buffer, dy.strides[0], m.@buffer, m.strides[0])\nm\n"}},{"id":"outer(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32))-instance-method","html_id":"outer(dx:Bottle::Tensor(Float32),dy:Bottle::Tensor(Float32))-instance-method","name":"outer","doc":"Compute the outer product of two `Tensor`s.\n\nGiven two vectors, `a = [a0, a1, ..., aM]` and\n`b = [b0, b1, ..., bN]`, the outer product is:\n\n```\n# [[a0*b0  a0*b1 ... a0*bN ]\n#  [a1*b0    .\n#  [ ...          .\n#  [aM*b0            aM*bN ]]\n```","summary":"<p>Compute the outer product of two <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>s.</p>","abstract":false,"args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"}],"args_string":"(dx : Bottle::Tensor(Float32), dy : Bottle::Tensor(Float32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L203","def":{"name":"outer","args":[{"name":"dx","doc":null,"default_value":"","external_name":"dx","restriction":"Tensor(Float32)"},{"name":"dy","doc":null,"default_value":"","external_name":"dy","restriction":"Tensor(Float32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if dx.shape != dy.shape\n  raise(\"Shapes #{dx.shape} and #{dy.shape} are not aligned\")\nend\nif dx.ndims > 1\n  raise(\"Only one-dimension tensors are supported\")\nend\nm = Tensor(Float32).new([dx.shape[0], dy.shape[0]])\nLibCblas.sger(LibCblas::MatrixLayout::RowMajor, dx.size, dy.size, Float32.new(1), dx.@buffer, dx.strides[0], dy.@buffer, dy.strides[0], m.@buffer, m.strides[0])\nm\n"}}],"macros":[{"id":"linalg(dtype,prefix)-macro","html_id":"linalg(dtype,prefix)-macro","name":"linalg","doc":null,"summary":null,"abstract":false,"args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":""}],"args_string":"(dtype, prefix)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/linalg/fixed_dimension.cr#L6","def":{"name":"linalg","args":[{"name":"dtype","doc":null,"default_value":"","external_name":"dtype","restriction":""},{"name":"prefix","doc":null,"default_value":"","external_name":"prefix","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# Dot product of two `Tensor`s. Specifically, this is the inner\n\n    \n# product of two `Tensor`s without the complex conjugate.\n\n    \n#\n\n    \n# ```\n\n    \n# t = Tensor.new [1.0, 2.0, 3.0]\n\n    \n#\n\n    \n# dot(t, t) # => 14.0\n\n    \n# ```\n\n    def dot(dx : Tensor(\n{{ dtype }}\n), dy : Tensor(\n{{ dtype }}\n))\n      if dx.shape != dy.shape\n        raise \"Shapes #{dx.shape} and #{dy.shape} are not aligned\"\n      \nend\n\n      if dx.ndims > 1\n        raise \"Only one-dimension tensors are supported\"\n      \nend\n\n      LibCblas.\n{{ prefix }}\ndot(\n        dx.size,\n        dx.@buffer,\n        dx.strides[0],\n        dy.@buffer,\n        dy.strides[0],\n      )\n    \nend\n\n    \n# Inner product of two `Tensor`s without the complex conjugate.\n\n    \n#\n\n    \n# ```\n\n    \n# t = Tensor.new [1.0, 2.0, 3.0]\n\n    \n#\n\n    \n# inner(t, t) # => 14.0\n\n    \n# ```\n\n    def inner(dx : Tensor(\n{{ dtype }}\n), dy : Tensor(\n{{ dtype }}\n))\n      dot(dx, dy)\n    \nend\n\n    \n# Compute the outer product of two `Tensor`s.\n\n    \n#\n\n    \n# Given two vectors, `a = [a0, a1, ..., aM]` and\n\n    \n# `b = [b0, b1, ..., bN]`, the outer product is:\n\n    \n#\n\n    \n# ```\n\n    \n# # [[a0*b0  a0*b1 ... a0*bN ]\n\n    \n# #  [a1*b0    .\n\n    \n# #  [ ...          .\n\n    \n# #  [aM*b0            aM*bN ]]\n\n    \n# ```\n\n    def outer(dx : Tensor(\n{{ dtype }}\n), dy : Tensor(\n{{ dtype }}\n))\n      if dx.shape != dy.shape\n        raise \"Shapes #{dx.shape} and #{dy.shape} are not aligned\"\n      \nend\n\n      if dx.ndims > 1\n        raise \"Only one-dimension tensors are supported\"\n      \nend\n\n      m = Tensor(\n{{ dtype }}\n).new([dx.shape[0], dy.shape[0]])\n\n      LibCblas.\n{{ prefix }}\nger(\n        LibCblas::MatrixLayout::RowMajor,\n        dx.size,\n        dy.size,\n        \n{{ dtype }}\n.new(1),\n        dx.@buffer,\n        dx.strides[0],\n        dy.@buffer,\n        dy.strides[0],\n        m.@buffer,\n        m.strides[0],\n      )\n      m\n    \nend\n\n    \n# Computes the Matrix product of two matrices.\n\n    \n#\n\n    \n# ```\n\n    \n# m = Matrix.new [[1.0, 2.0], [3.0, 4.0]]\n\n    \n# matmul(m, m)\n\n    \n#\n\n    \n# # Matrix[[      7.0     10.0]\n\n    \n# #        [     15.0     22.0]]\n\n    \n# ```\n\n    def matmul(dx : Tensor(\n{{ dtype }}\n), dy : Tensor(\n{{ dtype }}\n), dest : Tensor(\n{{ dtype }}\n)? = nil)\n      if dx.shape[1] != dy.shape[0]\n        raise \"Matrices cannot be multiplied together\"\n      \nend\n\n      if dx.ndims > 2\n        raise \"Only two dimensional tensors are currently supported\"\n      \nend\n\n      if dest.nil?\n        m = Tensor(\n{{ dtype }}\n).new([dx.shape[0], dy.shape[1]])\n      \nelse\n        m = dest.as(Tensor(\n{{ dtype }}\n))\n      \nend\n\n      LibCblas.\n{{ prefix }}\ngemm(\n        LibCblas::MatrixLayout::RowMajor,\n        LibCblas::MatrixTranspose::NoTrans,\n        LibCblas::MatrixTranspose::NoTrans,\n        dx.shape[0],\n        dy.shape[1],\n        dx.shape[1],\n        \n{{ dtype }}\n.new(1),\n        dx.@buffer,\n        dx.strides[0],\n        dy.@buffer,\n        dy.strides[0],\n        \n{{ dtype }}\n.new(0),\n        m.@buffer,\n        m.strides[0],\n      )\n      m\n    \nend\n\n    \n# Returns the euclidean norm of a vector via the function\n\n    \n# name, so that\n\n    \n#\n\n    \n# norm(x) := sqrt( x'*x )\n\n    \n#\n\n    \n# ```\n\n    \n# t = Tensor.new [1.0, 2.0, 3.0]\n\n    \n#\n\n    \n# norm(t) # => 3.7416573867739413\n\n    \n# ```\n\n    def norm(x : Tensor(\n{{ dtype }}\n))\n      if x.ndims > 1\n        raise \"Only one-dimensional tensors are supported\"\n      \nend\n      LibCblas.\n{{ prefix }}\nnrm2(\n        x.size,\n        x.@buffer,\n        x.strides[0],\n      )\n    \nend\n\n    \n# Compute the (multiplicative) inverse of a `Matrix.\n\n    \n#\n\n    \n# Given a square matrix a, return the matrix ainv satisfying\n\n    \n# dot(a, ainv) = dot(ainv, a) = eye(a.shape[0]).\n\n    \n#\n\n    \n# ```\n\n    \n# m = Matrix.new [[1.0, 2.0], [3.0, 4.0]]\n\n    \n#\n\n    \n# inv(m)\n\n    \n#\n\n    \n# # Matrix[[    -2.0     1.0]\n\n    \n# #        [     1.5    -0.5]]\n\n    \n# ```\n\n    def inv(a : Tensor(\n{{ dtype }}\n))\n      if a.shape[0] != a.shape[1]\n        raise \"Matrix must be square\"\n      \nend\n\n      if a.ndims > 2\n        raise \"Only 2 dimensional square matrices are supported\"\n      \nend\n\n      a = a.dup\n      dim = a.shape[0]\n      ipiv = Pointer(Int32).malloc(dim)\n\n      m = a.shape[0]\n      n = a.shape[1]\n      lda = a.strides[0]\n\n      LibLapack.\n{{ prefix }}\ngetrf(\n        pointerof(m),\n        pointerof(n),\n        a.@buffer,\n        pointerof(lda),\n        ipiv,\n        out info\n      )\n\n      order = dim\n      lwork = m * n\n      work = Pointer(\n{{ dtype }}\n).malloc(lwork)\n\n      LibLapack.\n{{ prefix }}\ngetri(\n        pointerof(order),\n        a.@buffer,\n        pointerof(lda),\n        ipiv,\n        work,\n        pointerof(lwork),\n        out invinfo,\n      )\n\n      return a\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/MatrixIter","path":"Bottle/Internal/MatrixIter.html","kind":"struct","full_name":"Bottle::Internal::MatrixIter(T)","name":"MatrixIter","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/crystal-data/bottle/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/crystal-data/bottle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core/nditer.cr","line_number":167,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(tns:Bottle::Tensor(T))-class-method","html_id":"new(tns:Bottle::Tensor(T))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"tns","doc":null,"default_value":"","external_name":"tns","restriction":"Tensor(T)"}],"args_string":"(tns : Bottle::Tensor(T))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L175","def":{"name":"new","args":[{"name":"tns","doc":null,"default_value":"","external_name":"tns","restriction":"Tensor(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = MatrixIter(T).allocate\n_.initialize(tns)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"axis:Int32-instance-method","html_id":"axis:Int32-instance-method","name":"axis","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L172","def":{"name":"axis","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@axis"}},{"id":"dim:Int32-instance-method","html_id":"dim:Int32-instance-method","name":"dim","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L173","def":{"name":"dim","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@dim"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L187","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @idx == @dim\n  return stop\nend\n@ranges[axis] = @idx\n@idx = @idx + 1\ntns.slice(@ranges)\n"}},{"id":"ranges:Array(Int32|Range(Int32,Int32))-instance-method","html_id":"ranges:Array(Int32|Range(Int32,Int32))-instance-method","name":"ranges","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int32 | Range(Int32, Int32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L174","def":{"name":"ranges","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32 | Range(Int32, Int32))","visibility":"Public","body":"@ranges"}},{"id":"tns:Bottle::Tensor(T)-instance-method","html_id":"tns:Bottle::Tensor(T)-instance-method","name":"tns","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bottle::Tensor(T)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L171","def":{"name":"tns","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tensor(T)","visibility":"Public","body":"@tns"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Numeric","path":"Bottle/Internal/Numeric.html","kind":"module","full_name":"Bottle::Internal::Numeric","name":"Numeric","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/numeric.cr","line_number":9,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Numeric","kind":"module","full_name":"Bottle::Internal::Numeric","name":"Numeric"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":"A module primarily responsible for `Tensor`\nand `Matrix` creation routines.\n\nThis module should be namespaced as part of the\nexternal API to provide user facing methods\nfor creation.","summary":"<p>A module primarily responsible for <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> and <code>Matrix</code> creation routines.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"arange(start:Int32,stop:Int32,step:Int32=1,dtype:U.class=Int32)forallU-instance-method","html_id":"arange(start:Int32,stop:Int32,step:Int32=1,dtype:U.class=Int32)forallU-instance-method","name":"arange","doc":"Return evenly spaced values within a given interval.\n\nValues are generated within the half-open interval [start, stop)\n(in other words, the interval including start but excluding stop).\n\n```crystal\nB.arange(1, 5) # => Tensor[1, 2, 3, 4]\n```","summary":"<p>Return evenly spaced values within a given interval.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int32"},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":"Int32"},{"name":"step","doc":null,"default_value":"1","external_name":"step","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Int32","external_name":"dtype","restriction":"U.class"}],"args_string":"(start : Int32, stop : Int32, step : Int32 = <span class=\"n\">1</span>, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Int32</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L159","def":{"name":"arange","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int32"},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":"Int32"},{"name":"step","doc":null,"default_value":"1","external_name":"step","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Int32","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"r = stop - start\nnum = r // step\nif stop <= start || (!num)\n  raise(\"vrange must return at least one value\")\nend\nTensor.new([num]) do |i|\n  U.new(start + (i * step))\nend\n"}},{"id":"arange(stop:Int32,step:Int32=1,dtype:U.class=Int32)forallU-instance-method","html_id":"arange(stop:Int32,step:Int32=1,dtype:U.class=Int32)forallU-instance-method","name":"arange","doc":"Return evenly spaced values within a given interval.\n\nValues are generated within the half-open interval [start, stop)\n(in other words, the interval including start but excluding stop).\n\n```crystal\nB.arange(5) # => Tensor[0, 1, 2, 3, 4]\n```","summary":"<p>Return evenly spaced values within a given interval.</p>","abstract":false,"args":[{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":"Int32"},{"name":"step","doc":null,"default_value":"1","external_name":"step","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Int32","external_name":"dtype","restriction":"U.class"}],"args_string":"(stop : Int32, step : Int32 = <span class=\"n\">1</span>, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Int32</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L176","def":{"name":"arange","args":[{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":"Int32"},{"name":"step","doc":null,"default_value":"1","external_name":"step","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Int32","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arange(0, stop, step, dtype)"}},{"id":"diag(a:Bottle::Tensor(U),k:Int32=0)forallU-instance-method","html_id":"diag(a:Bottle::Tensor(U),k:Int32=0)forallU-instance-method","name":"diag","doc":"Returns a Matrix with the given\n`Tensor` set along the diagonal.\n\nTODO: Support *k* offsets","summary":"<p>Returns a Matrix with the given <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> set along the diagonal.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"},{"name":"k","doc":null,"default_value":"0","external_name":"k","restriction":"Int32"}],"args_string":"(a : Bottle::Tensor(U), k : Int32 = <span class=\"n\">0</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L142","def":{"name":"diag","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"},{"name":"k","doc":null,"default_value":"0","external_name":"k","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if a.ndims > 1\n  raise(\"Only 1 dimensional Tensors are supported\")\nend\nTensor.new(a.shape[0], a.shape[0]) do |i, j|\n  i == (j - k) ? a[[i]] : U.new(0)\nend\n"}},{"id":"empty(shape:Array(Int32),dtype:U.class=Float64)forallU-instance-method","html_id":"empty(shape:Array(Int32),dtype:U.class=Float64)forallU-instance-method","name":"empty","doc":"Initializes a `Tensor` with an uninitialized slice\nof data.\n\n```crystal\nf = empty(5, dtype: Int32)\nf # => Tensor[0, 0, 0, 0, 0]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with an uninitialized slice of data.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(shape : Array(Int32), dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L19","def":{"name":"empty","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(shape)"}},{"id":"empty_like(other:Tensor,dtype:U.class=Float64)forallU-instance-method","html_id":"empty_like(other:Tensor,dtype:U.class=Float64)forallU-instance-method","name":"empty_like","doc":"Initializes a `Tensor` with an uninitialized slice\nof data that is the same size as a given\n`Tensor`.\n\n```crystal\nt = Tensor.new [1, 2, 3]\n\nf = empty_like(t, dtype: Int32)\nf # => Tensor[0, 0, 0]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with an uninitialized slice of data that is the same size as a given <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(other : Tensor, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L33","def":{"name":"empty_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(other.shape)"}},{"id":"eye(m:Int32,n:Int32?=nil,k:Int32=0,dtype:U.class=Float64)forallU-instance-method","html_id":"eye(m:Int32,n:Int32?=nil,k:Int32=0,dtype:U.class=Float64)forallU-instance-method","name":"eye","doc":"Return a `Matrix` with ones on the diagonal and\nzeros elsewhere.\n\n```\nm = eye(3, dtype: Int32)\n\nm # => [[1, 0, 0], [0, 1, 0], 0, 0, 1]\n```","summary":"<p>Return a <code>Matrix</code> with ones on the diagonal and zeros elsewhere.</p>","abstract":false,"args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Int32"},{"name":"n","doc":null,"default_value":"nil","external_name":"n","restriction":"Int32 | ::Nil"},{"name":"k","doc":null,"default_value":"0","external_name":"k","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(m : Int32, n : Int32? = <span class=\"n\">nil</span>, k : Int32 = <span class=\"n\">0</span>, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L45","def":{"name":"eye","args":[{"name":"m","doc":null,"default_value":"","external_name":"m","restriction":"Int32"},{"name":"n","doc":null,"default_value":"nil","external_name":"n","restriction":"Int32 | ::Nil"},{"name":"k","doc":null,"default_value":"0","external_name":"k","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"n = n.nil? ? m : n.as(Int32)\nTensor.new(m, n) do |i, j|\n  i == (j - k) ? U.new(1) : U.new(0)\nend\n"}},{"id":"full(shape:Array(Int32),x:Number,dtype:U.class=Float64)forallU-instance-method","html_id":"full(shape:Array(Int32),x:Number,dtype:U.class=Float64)forallU-instance-method","name":"full","doc":"Initializes a `Tensor` of the given `size` and `dtype`,\nfilled with the given value.\n\n```crystal\nf = full(5, 3, dtype: Int32)\nf # => Tensor[3, 3, 3, 3, 3]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> of the given <code>size</code> and <code>dtype</code>, filled with the given value.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Number"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(shape : Array(Int32), x : Number, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L121","def":{"name":"full","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Number"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(shape) do |_|\n  U.new(x)\nend"}},{"id":"full_like(other:NDTensor,x:Number,dtype:U.class=Float64)forallU-instance-method","html_id":"full_like(other:NDTensor,x:Number,dtype:U.class=Float64)forallU-instance-method","name":"full_like","doc":"Initializes a `Tensor` filled with the provided value, whose size\nis inferred from a given `Tensor`\n\n```crystal\nt = Tensor.new [1, 2, 3]\n\nf = full_like(t, -1, dtype: Int32)\nf # => Tensor[-1, -1, -1]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> filled with the provided value, whose size is inferred from a given <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"NDTensor"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Number"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(other : NDTensor, x : Number, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L134","def":{"name":"full_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"NDTensor"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Number"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(other.shape) do |_|\n  U.new(x)\nend"}},{"id":"geomspace(start,stop,num=50,endpoint=true)-instance-method","html_id":"geomspace(start,stop,num=50,endpoint=true)-instance-method","name":"geomspace","doc":"Return numbers spaced evenly on a log scale (a geometric progression).\nThis is similar to `logspace`, but with endpoints specified directly.\nEach output sample is a constant multiple of the previous.\n\n```\ngeomspace(1, 1000, 4) # => Tensor[1.0, 10.0, 100.0, 1000.0]\n```","summary":"<p>Return numbers spaced evenly on a log scale (a geometric progression).</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":""},{"name":"num","doc":null,"default_value":"50","external_name":"num","restriction":""},{"name":"endpoint","doc":null,"default_value":"true","external_name":"endpoint","restriction":""}],"args_string":"(start, stop, num = <span class=\"n\">50</span>, endpoint = <span class=\"n\">true</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L235","def":{"name":"geomspace","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":""},{"name":"num","doc":null,"default_value":"50","external_name":"num","restriction":""},{"name":"endpoint","doc":null,"default_value":"true","external_name":"endpoint","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (start == 0) || (stop == 0)\n  raise(\"Geometric sequence cannot include zero\")\nend\nout_sign = 1.0\nif start < 0 && stop < 0\n  start, stop = -start, -stop\n  out_sign = -out_sign\nend\nlog_start = Math.log(start, 10.0)\nlog_stop = Math.log(stop, 10.0)\n(logspace(log_start, log_stop, num: num, endpoint: endpoint, base: 10.0)) * out_sign\n"}},{"id":"identity(n:Int32,dtype:U.class=Float64)forallU-instance-method","html_id":"identity(n:Int32,dtype:U.class=Float64)forallU-instance-method","name":"identity","doc":"Returns the identify matrix with dimensions\n*m* by *m*\n\n```\nm = identity(3)\n\nm # => [[1.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 1.0]]\n```","summary":"<p>Returns the identify matrix with dimensions <em>m</em> by <em>m</em></p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(n : Int32, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L60","def":{"name":"identity","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int32"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor.new(n, n) do |i, j|\n  i == j ? U.new(1) : U.new(0)\nend"}},{"id":"linspace(start:Number,stop:Number,num=50,endpoint=true)-instance-method","html_id":"linspace(start:Number,stop:Number,num=50,endpoint=true)-instance-method","name":"linspace","doc":"Return evenly spaced numbers over a specified interval.\nReturns `num` evenly spaced samples, calculated over the\ninterval [`start`, `stop`].\nThe endpoint of the interval can optionally be excluded.\n\n```crystal\nB.linspace(0, 1, 5) # => Tensor[0.0, 0.25, 0.5, 0.75, 1.0]\n\nB.linspace(0, 1, 5, endpoint: false) # => Tensor[0.0, 0.2, 0.4, 0.6, 0.8]\n```","summary":"<p>Return evenly spaced numbers over a specified interval.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Number"},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":"Number"},{"name":"num","doc":null,"default_value":"50","external_name":"num","restriction":""},{"name":"endpoint","doc":null,"default_value":"true","external_name":"endpoint","restriction":""}],"args_string":"(start : Number, stop : Number, num = <span class=\"n\">50</span>, endpoint = <span class=\"n\">true</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L190","def":{"name":"linspace","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Number"},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":"Number"},{"name":"num","doc":null,"default_value":"50","external_name":"num","restriction":""},{"name":"endpoint","doc":null,"default_value":"true","external_name":"endpoint","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if num < 0\n  raise(\"Number of samples, #{num}, must be non-negative\")\nend\ndiv = endpoint ? num - 1 : num\nstart = start * 1.0\nstop = stop * 1.0\ny = arange(num, dtype: Float64)\ndelta = stop - start\nif num > 1\n  step = delta / div\n  if step == 0\n    raise(\"Cannot have a step of 0\")\n  end\n  y = y * step\nelse\n  y = y * delta\nend\ny = y + start\nif endpoint && num > 1\n  y[[y.shape[0] - 1]] = stop\nend\ny\n"}},{"id":"logspace(start,stop,num=50,endpoint=true,base=10.0)-instance-method","html_id":"logspace(start,stop,num=50,endpoint=true,base=10.0)-instance-method","name":"logspace","doc":"Return numbers spaced evenly on a log scale.\nIn linear space, the sequence starts at ``base ** start``\n(`base` to the power of `start`) and ends with ``base ** stop``\n(see `endpoint` below).\n\n```crystal\nB.logspace(2.0, 3.0, num = 4) # => Tensor[100.0, 215.44346900318845, 464.15888336127773, 1000.0]\n```","summary":"<p>Return numbers spaced evenly on a log scale.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":""},{"name":"num","doc":null,"default_value":"50","external_name":"num","restriction":""},{"name":"endpoint","doc":null,"default_value":"true","external_name":"endpoint","restriction":""},{"name":"base","doc":null,"default_value":"10.0","external_name":"base","restriction":""}],"args_string":"(start, stop, num = <span class=\"n\">50</span>, endpoint = <span class=\"n\">true</span>, base = <span class=\"n\">10.0</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L223","def":{"name":"logspace","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":""},{"name":"stop","doc":null,"default_value":"","external_name":"stop","restriction":""},{"name":"num","doc":null,"default_value":"50","external_name":"num","restriction":""},{"name":"endpoint","doc":null,"default_value":"true","external_name":"endpoint","restriction":""},{"name":"base","doc":null,"default_value":"10.0","external_name":"base","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"y = linspace(start, stop, num: num, endpoint: endpoint)\npower(base, y)\n"}},{"id":"ones(shape:Array(Int32),dtype:U.class=Float64)forallU-instance-method","html_id":"ones(shape:Array(Int32),dtype:U.class=Float64)forallU-instance-method","name":"ones","doc":"Initializes a `Tensor` of the given `size` and `dtype`,\nfilled with ones.\n\n```crystal\nf = ones(5, dtype: Int32)\nf # => Tensor[1, 1, 1, 1, 1]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> of the given <code>size</code> and <code>dtype</code>, filled with ones.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(shape : Array(Int32), dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L73","def":{"name":"ones","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(shape) do |_|\n  U.new(1)\nend"}},{"id":"ones_like(other:Tensor,dtype:U.class=Float64)forallU-instance-method","html_id":"ones_like(other:Tensor,dtype:U.class=Float64)forallU-instance-method","name":"ones_like","doc":"Initializes a `Tensor` filled with ones, whose size\nis inferred from a given `Tensor`\n\n```crystal\nt = Tensor.new [1, 2, 3]\n\nf = ones_like(t, dtype: Int32)\nf # => Tensor[1, 1, 1]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> filled with ones, whose size is inferred from a given <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(other : Tensor, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L86","def":{"name":"ones_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(other.shape) do |_|\n  U.new(1)\nend"}},{"id":"zeros(shape:Array(Int32),dtype:U.class=Float64)forallU-instance-method","html_id":"zeros(shape:Array(Int32),dtype:U.class=Float64)forallU-instance-method","name":"zeros","doc":"Initializes a `Tensor` of the given `size` and `dtype`,\nfilled with zeros.\n\n```crystal\nf = zeros(5, dtype: Int32)\nf # => Tensor[0, 0, 0, 0, 0]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> of the given <code>size</code> and <code>dtype</code>, filled with zeros.</p>","abstract":false,"args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(shape : Array(Int32), dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L97","def":{"name":"zeros","args":[{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":"Array(Int32)"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(shape) do |_|\n  U.new(0)\nend"}},{"id":"zeros_like(other:NDTensor,dtype:U.class=Float64)forallU-instance-method","html_id":"zeros_like(other:NDTensor,dtype:U.class=Float64)forallU-instance-method","name":"zeros_like","doc":"Initializes a `Tensor` filled with zeros, whose size\nis inferred from a given `Tensor`\n\n```crystal\nt = Tensor.new [1, 2, 3]\n\nf = zeros_like(t, dtype: Int32)\nf # => Tensor[0, 0, 0]\n```","summary":"<p>Initializes a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> filled with zeros, whose size is inferred from a given <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"NDTensor"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"args_string":"(other : NDTensor, dtype : <span class=\"t\">U</span>.<span class=\"k\">class</span> = <span class=\"t\">Float64</span>) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/numeric.cr#L110","def":{"name":"zeros_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"NDTensor"},{"name":"dtype","doc":null,"default_value":"Float64","external_name":"dtype","restriction":"U.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Tensor(U).new(other.shape) do |_|\n  U.new(1)\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Statistics","path":"Bottle/Internal/Statistics.html","kind":"module","full_name":"Bottle::Internal::Statistics","name":"Statistics","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/statistics.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Statistics","kind":"module","full_name":"Bottle::Internal::Statistics","name":"Statistics"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"max(a:Tensor,axis:Int32)-instance-method","html_id":"max(a:Tensor,axis:Int32)-instance-method","name":"max","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"args_string":"(a : Tensor, axis : Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L87","def":{"name":"max","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a.reduce_along_axis(axis) do |i, j|\n  if i.value > j.value\n    j.value = i.value\n  end\nend"}},{"id":"max(a:Bottle::Tensor(U))forallU-instance-method","html_id":"max(a:Bottle::Tensor(U))forallU-instance-method","name":"max","doc":"Computes the maximum value of a Tensor\n\n```\nv = Tensor.new [1, 2, 3, 4]\nmax(v) # => 4\n```","summary":"<p>Computes the maximum value of a Tensor</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"}],"args_string":"(a : Bottle::Tensor(U)) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L73","def":{"name":"max","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"mx = uninitialized U\na.flat_iter.each_with_index do |el, i|\n  c = el.value\n  if i == 0\n    mx = c\n  end\n  if c > mx\n    mx = c\n  end\nend\nmx\n"}},{"id":"mean(a:Tensor,axis:Int32)-instance-method","html_id":"mean(a:Tensor,axis:Int32)-instance-method","name":"mean","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"args_string":"(a : Tensor, axis : Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L32","def":{"name":"mean","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"n = a.shape[axis]\na.reduce_along_axis(axis) do |i, j|\n  j.value = j.value + (i.value / n)\nend\n"}},{"id":"mean(a:Tensor)-instance-method","html_id":"mean(a:Tensor)-instance-method","name":"mean","doc":"Computes the average of all Tensor values\n\n```\nv = Tensor.new [1, 2, 3, 4]\nmean(v) # => 2.5\n```","summary":"<p>Computes the average of all Tensor values</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"}],"args_string":"(a : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L28","def":{"name":"mean","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a.sum / a.size"}},{"id":"median(a:Tensor)-instance-method","html_id":"median(a:Tensor)-instance-method","name":"median","doc":"Computes the median value of a Tensor\n\n```\nv = Tensor.new [1, 2, 3, 4]\nmedian(v) # => 2.5\n```","summary":"<p>Computes the median value of a Tensor</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"}],"args_string":"(a : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L57","def":{"name":"median","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"n = a.size\nsorted = a.sort\nif n % 2\n  sorted[(n - 1) // 2]\nend\nm = (n - 1) / 2\nB.mean(sorted[[m.floor.to_i32, m.ceil.to_i32]])\n"}},{"id":"min(a:Tensor,axis:Int32)-instance-method","html_id":"min(a:Tensor,axis:Int32)-instance-method","name":"min","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"args_string":"(a : Tensor, axis : Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L115","def":{"name":"min","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a.reduce_along_axis(axis) do |i, j|\n  if i.value < j.value\n    j.value = i.value\n  end\nend"}},{"id":"min(a:Bottle::Tensor(U))forallU-instance-method","html_id":"min(a:Bottle::Tensor(U))forallU-instance-method","name":"min","doc":"Computes the minimum value of a Tensor\n\n```\nv = Tensor.new [1, 2, 3, 4]\nmin(v) # => 1\n```","summary":"<p>Computes the minimum value of a Tensor</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"}],"args_string":"(a : Bottle::Tensor(U)) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L101","def":{"name":"min","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"mx = uninitialized U\na.flat_iter.each_with_index do |el, i|\n  c = el.value\n  if i == 0\n    mx = c\n  end\n  if c < mx\n    mx = c\n  end\nend\nmx\n"}},{"id":"ptp(a:Tensor,axis:Int32)-instance-method","html_id":"ptp(a:Tensor,axis:Int32)-instance-method","name":"ptp","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"args_string":"(a : Tensor, axis : Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L133","def":{"name":"ptp","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(max(a, axis)) - (min(a, axis))"}},{"id":"ptp(v:Tensor)-instance-method","html_id":"ptp(v:Tensor)-instance-method","name":"ptp","doc":"Computes the \"peak to peak\" of a Tensor (max - min)\n\n```\nv = Tensor.new [1, 2, 3, 4]\nv.ptp # => 3\n```","summary":"<p>Computes the \"peak to peak\" of a Tensor (max - min)</p>","abstract":false,"args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Tensor"}],"args_string":"(v : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L129","def":{"name":"ptp","args":[{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(max(v)) - (min(v))"}},{"id":"std(a:Tensor)-instance-method","html_id":"std(a:Tensor)-instance-method","name":"std","doc":"Computes the standard deviation of a Tensor\n\n```\nv = Tensor.new [1, 2, 3, 4]\nstd(v) # => 1.118\n```","summary":"<p>Computes the standard deviation of a Tensor</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"}],"args_string":"(a : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L45","def":{"name":"std","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"avg = mean(a)\nr = power(a - avg, 2)\nMath.sqrt(r.sum / a.size)\n"}},{"id":"sum(a:Tensor,axis:Int32)-instance-method","html_id":"sum(a:Tensor,axis:Int32)-instance-method","name":"sum","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"args_string":"(a : Tensor, axis : Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L16","def":{"name":"sum","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor"},{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a.reduce_along_axis(axis) do |i, j|\n  j.value = j.value + i.value\nend"}},{"id":"sum(a:Bottle::Tensor(U))forallU-instance-method","html_id":"sum(a:Bottle::Tensor(U))forallU-instance-method","name":"sum","doc":"Computes the total sum of a Tensor\n\n```\nv = Tensor.new [1, 2, 3, 4]\nsum(v) # => 10\n```","summary":"<p>Computes the total sum of a Tensor</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"}],"args_string":"(a : Bottle::Tensor(U)) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/statistics.cr#L12","def":{"name":"sum","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Tensor(U)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"a.flat_iter.reduce(U.new(0)) do |i, j|\n  i + j.value\nend"}}],"macros":[],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ToString","path":"Bottle/Internal/ToString.html","kind":"module","full_name":"Bottle::Internal::ToString","name":"ToString","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/printoptions.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ToString/TensorPrint","path":"Bottle/Internal/ToString/TensorPrint.html","kind":"class","full_name":"Bottle::Internal::ToString::TensorPrint(T)","name":"TensorPrint","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core/printoptions.cr","line_number":4,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/ToString","kind":"module","full_name":"Bottle::Internal::ToString","name":"ToString"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(t:Bottle::Tensor(T),io)-class-method","html_id":"new(t:Bottle::Tensor(T),io)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Tensor(T)"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(t : Bottle::Tensor(T), io)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L17","def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Tensor(T)"},{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = TensorPrint(T).allocate\n_.initialize(t, io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"calc_ptr(idx)-instance-method","html_id":"calc_ptr(idx)-instance-method","name":"calc_ptr","doc":null,"summary":null,"abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"args_string":"(idx)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L53","def":{"name":"calc_ptr","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = @t.@buffer\nidx.zip(strides) do |i, j|\n  ret = ret + (i * j)\nend\nret\n"}},{"id":"cbrackets:String-instance-method","html_id":"cbrackets:String-instance-method","name":"cbrackets","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L12","def":{"name":"cbrackets","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@cbrackets"}},{"id":"inc-instance-method","html_id":"inc-instance-method","name":"inc","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L68","def":{"name":"inc","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"first_item = 0\nii = 0\n__temp_40 = ii\n@idx[__temp_40] = @idx[__temp_40] + 1\n@ptr = calc_ptr(@idx)\nwhile (@idx[ii] == shape[ii])\n  @idx[ii] = 0\n  ii = ii + 1\n  if (  ii == @idx.size)\n    @io << (\"]\" * ii)\n    return false\n  end\n  first_item = first_item + 1\n  __temp_42 = ii\n  @idx[__temp_42] = @idx[__temp_42] + 1\n  @ptr = calc_ptr(@idx)\nend\nif (ii != 0)\n  @io << (\"]\" * ii)\n  @io << \",\"\n  @io << (\"\\n \" * ii)\n  (@io << \"       \") << indent[0...((@t.ndims - ii) - 1)]\nend\nif first_item > 0\n  @io << (\"[\" * first_item)\nelse\n  @io << \", \"\nend\n@io << (\"#{@ptr.value.round(3)}\".rjust(maxval))\ntrue\n"}},{"id":"indent:String-instance-method","html_id":"indent:String-instance-method","name":"indent","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L13","def":{"name":"indent","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@indent"}},{"id":"last_comma:Int32-instance-method","html_id":"last_comma:Int32-instance-method","name":"last_comma","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L14","def":{"name":"last_comma","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@last_comma"}},{"id":"maxval:Int32-instance-method","html_id":"maxval:Int32-instance-method","name":"maxval","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L17","def":{"name":"maxval","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@maxval"}},{"id":"obrackets:String-instance-method","html_id":"obrackets:String-instance-method","name":"obrackets","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L11","def":{"name":"obrackets","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@obrackets"}},{"id":"print-instance-method","html_id":"print-instance-method","name":"print","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L61","def":{"name":"print","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@io << (\"#{@ptr.value.round(3)}\".rjust(maxval))\nwhile !(!inc)\nend\n@io << \")\"\n"}},{"id":"shape:Array(Int32)-instance-method","html_id":"shape:Array(Int32)-instance-method","name":"shape","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L16","def":{"name":"shape","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32)","visibility":"Public","body":"@shape"}},{"id":"strides:Array(Int32)-instance-method","html_id":"strides:Array(Int32)-instance-method","name":"strides","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/printoptions.cr#L15","def":{"name":"strides","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32)","visibility":"Public","body":"@strides"}}],"macros":[],"types":[]}]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Trigonometric","path":"Bottle/Internal/Trigonometric.html","kind":"module","full_name":"Bottle::Internal::Trigonometric","name":"Trigonometric","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/trig.cr","line_number":9,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/Trigonometric","kind":"module","full_name":"Bottle::Internal::Trigonometric","name":"Trigonometric"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":"A module primarily responsible for `Tensor`\nand `Matrix` trigonometric routines.\n\nThis module should be namespaced as part of the\nexternal API to provide user facing methods\nfor creation.","summary":"<p>A module primarily responsible for <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> and <code>Matrix</code> trigonometric routines.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"acos(x1:Tensor)-instance-method","html_id":"acos(x1:Tensor)-instance-method","name":"acos","doc":"Calculates the acos of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.acos(t1)\n```","summary":"<p>Calculates the acos of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"acos","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.acos(iter.next.value)\nend\n"}},{"id":"acosh(x1:Tensor)-instance-method","html_id":"acosh(x1:Tensor)-instance-method","name":"acosh","doc":"Calculates the acosh of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.acosh(t1)\n```","summary":"<p>Calculates the acosh of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"acosh","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.acosh(iter.next.value)\nend\n"}},{"id":"asin(x1:Tensor)-instance-method","html_id":"asin(x1:Tensor)-instance-method","name":"asin","doc":"Calculates the asin of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.asin(t1)\n```","summary":"<p>Calculates the asin of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"asin","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.asin(iter.next.value)\nend\n"}},{"id":"asinh(x1:Tensor)-instance-method","html_id":"asinh(x1:Tensor)-instance-method","name":"asinh","doc":"Calculates the asinh of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.asinh(t1)\n```","summary":"<p>Calculates the asinh of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"asinh","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.asinh(iter.next.value)\nend\n"}},{"id":"atan(x1:Tensor)-instance-method","html_id":"atan(x1:Tensor)-instance-method","name":"atan","doc":"Calculates the atan of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.atan(t1)\n```","summary":"<p>Calculates the atan of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"atan","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.atan(iter.next.value)\nend\n"}},{"id":"atan2-instance-method","html_id":"atan2-instance-method","name":"atan2","doc":"Returns the universal atan2 function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.atan2 # => <ufunc> atan2","summary":"<p>Returns the universal atan2 function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"atan2","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_atan2.new"}},{"id":"atan2(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","html_id":"atan2(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","name":"atan2","doc":"atan2s a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.atan2(x, t)\n```","summary":"<p>atan2s a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"args_string":"(x1 : Number, x2 : Tensor, where : Tensor? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"atan2","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  Math.atan2(x2, iter.next.value)\nend\n"}},{"id":"atan2(x1:Tensor,x2:Number)-instance-method","html_id":"atan2(x1:Tensor,x2:Number)-instance-method","name":"atan2","doc":"Computes the atan2 of a `Tensor` with a scalar\nelementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.atan2(t1, t2)\n```","summary":"<p>Computes the atan2 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with a scalar elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"atan2","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.atan2(iter.next.value, x2)\nend\n"}},{"id":"atan2(x1:Tensor,x2:Tensor)-instance-method","html_id":"atan2(x1:Tensor,x2:Tensor)-instance-method","name":"atan2","doc":"Computes the atan2 of two Tensors elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.atan2(t1, t2)\n```","summary":"<p>Computes the atan2 of two Tensors elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"atan2","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.size}} and {#{x2.size} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.atan2(i1.next.value, i2.next.value)\nend\n"}},{"id":"atanh(x1:Tensor)-instance-method","html_id":"atanh(x1:Tensor)-instance-method","name":"atanh","doc":"Calculates the atanh of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.atanh(t1)\n```","summary":"<p>Calculates the atanh of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"atanh","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.atanh(iter.next.value)\nend\n"}},{"id":"besselj(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","html_id":"besselj(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","name":"besselj","doc":"besseljs a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.besselj(x, t)\n```","summary":"<p>besseljs a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"args_string":"(x1 : Number, x2 : Tensor, where : Tensor? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"besselj","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  Math.besselj(x2, iter.next.value)\nend\n"}},{"id":"besselj(x1:Tensor,x2:Number)-instance-method","html_id":"besselj(x1:Tensor,x2:Number)-instance-method","name":"besselj","doc":"Computes the besselj of a `Tensor` with a scalar\nelementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.besselj(t1, t2)\n```","summary":"<p>Computes the besselj of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with a scalar elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"besselj","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.besselj(iter.next.value, x2)\nend\n"}},{"id":"besselj(x1:Tensor,x2:Tensor)-instance-method","html_id":"besselj(x1:Tensor,x2:Tensor)-instance-method","name":"besselj","doc":"Computes the besselj of two Tensors elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.besselj(t1, t2)\n```","summary":"<p>Computes the besselj of two Tensors elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"besselj","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.size}} and {#{x2.size} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.besselj(i1.next.value, i2.next.value)\nend\n"}},{"id":"besselj-instance-method","html_id":"besselj-instance-method","name":"besselj","doc":"Returns the universal besselj function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.besselj # => <ufunc> besselj","summary":"<p>Returns the universal besselj function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"besselj","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_besselj.new"}},{"id":"besselj0(x1:Tensor)-instance-method","html_id":"besselj0(x1:Tensor)-instance-method","name":"besselj0","doc":"Calculates the besselj0 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.besselj0(t1)\n```","summary":"<p>Calculates the besselj0 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"besselj0","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.besselj0(iter.next.value)\nend\n"}},{"id":"besselj1(x1:Tensor)-instance-method","html_id":"besselj1(x1:Tensor)-instance-method","name":"besselj1","doc":"Calculates the besselj1 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.besselj1(t1)\n```","summary":"<p>Calculates the besselj1 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"besselj1","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.besselj1(iter.next.value)\nend\n"}},{"id":"bessely(x1:Tensor,x2:Number)-instance-method","html_id":"bessely(x1:Tensor,x2:Number)-instance-method","name":"bessely","doc":"Computes the bessely of a `Tensor` with a scalar\nelementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.bessely(t1, t2)\n```","summary":"<p>Computes the bessely of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with a scalar elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"bessely","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.bessely(iter.next.value, x2)\nend\n"}},{"id":"bessely(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","html_id":"bessely(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","name":"bessely","doc":"besselys a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.bessely(x, t)\n```","summary":"<p>besselys a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"args_string":"(x1 : Number, x2 : Tensor, where : Tensor? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"bessely","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  Math.bessely(x2, iter.next.value)\nend\n"}},{"id":"bessely-instance-method","html_id":"bessely-instance-method","name":"bessely","doc":"Returns the universal bessely function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.bessely # => <ufunc> bessely","summary":"<p>Returns the universal bessely function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"bessely","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_bessely.new"}},{"id":"bessely(x1:Tensor,x2:Tensor)-instance-method","html_id":"bessely(x1:Tensor,x2:Tensor)-instance-method","name":"bessely","doc":"Computes the bessely of two Tensors elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.bessely(t1, t2)\n```","summary":"<p>Computes the bessely of two Tensors elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"bessely","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.size}} and {#{x2.size} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.bessely(i1.next.value, i2.next.value)\nend\n"}},{"id":"bessely0(x1:Tensor)-instance-method","html_id":"bessely0(x1:Tensor)-instance-method","name":"bessely0","doc":"Calculates the bessely0 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.bessely0(t1)\n```","summary":"<p>Calculates the bessely0 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"bessely0","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.bessely0(iter.next.value)\nend\n"}},{"id":"bessely1(x1:Tensor)-instance-method","html_id":"bessely1(x1:Tensor)-instance-method","name":"bessely1","doc":"Calculates the bessely1 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.bessely1(t1)\n```","summary":"<p>Calculates the bessely1 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"bessely1","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.bessely1(iter.next.value)\nend\n"}},{"id":"cbrt(x1:Tensor)-instance-method","html_id":"cbrt(x1:Tensor)-instance-method","name":"cbrt","doc":"Calculates the cbrt of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.cbrt(t1)\n```","summary":"<p>Calculates the cbrt of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"cbrt","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.cbrt(iter.next.value)\nend\n"}},{"id":"copysign-instance-method","html_id":"copysign-instance-method","name":"copysign","doc":"Returns the universal copysign function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.copysign # => <ufunc> copysign","summary":"<p>Returns the universal copysign function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"copysign","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_copysign.new"}},{"id":"copysign(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","html_id":"copysign(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","name":"copysign","doc":"copysigns a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.copysign(x, t)\n```","summary":"<p>copysigns a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"args_string":"(x1 : Number, x2 : Tensor, where : Tensor? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"copysign","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  Math.copysign(x2, iter.next.value)\nend\n"}},{"id":"copysign(x1:Tensor,x2:Number)-instance-method","html_id":"copysign(x1:Tensor,x2:Number)-instance-method","name":"copysign","doc":"Computes the copysign of a `Tensor` with a scalar\nelementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.copysign(t1, t2)\n```","summary":"<p>Computes the copysign of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with a scalar elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"copysign","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.copysign(iter.next.value, x2)\nend\n"}},{"id":"copysign(x1:Tensor,x2:Tensor)-instance-method","html_id":"copysign(x1:Tensor,x2:Tensor)-instance-method","name":"copysign","doc":"Computes the copysign of two Tensors elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.copysign(t1, t2)\n```","summary":"<p>Computes the copysign of two Tensors elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"copysign","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.size}} and {#{x2.size} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.copysign(i1.next.value, i2.next.value)\nend\n"}},{"id":"cos(x1:Tensor)-instance-method","html_id":"cos(x1:Tensor)-instance-method","name":"cos","doc":"Calculates the cos of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.cos(t1)\n```","summary":"<p>Calculates the cos of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"cos","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.cos(iter.next.value)\nend\n"}},{"id":"cosh(x1:Tensor)-instance-method","html_id":"cosh(x1:Tensor)-instance-method","name":"cosh","doc":"Calculates the cosh of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.cosh(t1)\n```","summary":"<p>Calculates the cosh of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"cosh","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.cosh(iter.next.value)\nend\n"}},{"id":"degrees(x1:Tensor)-instance-method","html_id":"degrees(x1:Tensor)-instance-method","name":"degrees","doc":"Convert angles from radians to degrees.\n\n```\nt = Tensor.new [0, 1, 2, 3] * (Math::PI / 6)\n\ndegrees(t) # => Tensor[      0.0     30.0     60.0     90.0]\n```","summary":"<p>Convert angles from radians to degrees.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L152","def":{"name":"degrees","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  iter.next * (180 / Math::PI)\nend\n"}},{"id":"erf(x1:Tensor)-instance-method","html_id":"erf(x1:Tensor)-instance-method","name":"erf","doc":"Calculates the erf of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.erf(t1)\n```","summary":"<p>Calculates the erf of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"erf","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.erf(iter.next.value)\nend\n"}},{"id":"erfc(x1:Tensor)-instance-method","html_id":"erfc(x1:Tensor)-instance-method","name":"erfc","doc":"Calculates the erfc of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.erfc(t1)\n```","summary":"<p>Calculates the erfc of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"erfc","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.erfc(iter.next.value)\nend\n"}},{"id":"exp(x1:Tensor)-instance-method","html_id":"exp(x1:Tensor)-instance-method","name":"exp","doc":"Calculates the exp of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.exp(t1)\n```","summary":"<p>Calculates the exp of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"exp","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.exp(iter.next.value)\nend\n"}},{"id":"exp2(x1:Tensor)-instance-method","html_id":"exp2(x1:Tensor)-instance-method","name":"exp2","doc":"Calculates the exp2 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.exp2(t1)\n```","summary":"<p>Calculates the exp2 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"exp2","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.exp2(iter.next.value)\nend\n"}},{"id":"expm1(x1:Tensor)-instance-method","html_id":"expm1(x1:Tensor)-instance-method","name":"expm1","doc":"Calculates the expm1 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.expm1(t1)\n```","summary":"<p>Calculates the expm1 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"expm1","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.expm1(iter.next.value)\nend\n"}},{"id":"frexp(x1:Tensor)-instance-method","html_id":"frexp(x1:Tensor)-instance-method","name":"frexp","doc":"Calculates the frexp of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.frexp(t1)\n```","summary":"<p>Calculates the frexp of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"frexp","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.frexp(iter.next.value)\nend\n"}},{"id":"gamma(x1:Tensor)-instance-method","html_id":"gamma(x1:Tensor)-instance-method","name":"gamma","doc":"Calculates the gamma of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.gamma(t1)\n```","summary":"<p>Calculates the gamma of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"gamma","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.gamma(iter.next.value)\nend\n"}},{"id":"hypot(x1:Tensor,x2:Tensor)-instance-method","html_id":"hypot(x1:Tensor,x2:Tensor)-instance-method","name":"hypot","doc":"Computes the hypot of two Tensors elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.hypot(t1, t2)\n```","summary":"<p>Computes the hypot of two Tensors elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"hypot","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.size}} and {#{x2.size} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.hypot(i1.next.value, i2.next.value)\nend\n"}},{"id":"hypot(x1:Tensor,x2:Number)-instance-method","html_id":"hypot(x1:Tensor,x2:Number)-instance-method","name":"hypot","doc":"Computes the hypot of a `Tensor` with a scalar\nelementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.hypot(t1, t2)\n```","summary":"<p>Computes the hypot of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with a scalar elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"hypot","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.hypot(iter.next.value, x2)\nend\n"}},{"id":"hypot(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","html_id":"hypot(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","name":"hypot","doc":"hypots a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.hypot(x, t)\n```","summary":"<p>hypots a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"args_string":"(x1 : Number, x2 : Tensor, where : Tensor? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"hypot","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  Math.hypot(x2, iter.next.value)\nend\n"}},{"id":"hypot-instance-method","html_id":"hypot-instance-method","name":"hypot","doc":"Returns the universal hypot function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.hypot # => <ufunc> hypot","summary":"<p>Returns the universal hypot function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"hypot","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_hypot.new"}},{"id":"ilogb(x1:Tensor)-instance-method","html_id":"ilogb(x1:Tensor)-instance-method","name":"ilogb","doc":"Calculates the ilogb of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.ilogb(t1)\n```","summary":"<p>Calculates the ilogb of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"ilogb","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.ilogb(iter.next.value)\nend\n"}},{"id":"ldexp(x1:Tensor,x2:Tensor)-instance-method","html_id":"ldexp(x1:Tensor,x2:Tensor)-instance-method","name":"ldexp","doc":"Computes the ldexp of two Tensors elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.ldexp(t1, t2)\n```","summary":"<p>Computes the ldexp of two Tensors elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"ldexp","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.size}} and {#{x2.size} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.ldexp(i1.next.value, i2.next.value)\nend\n"}},{"id":"ldexp(x1:Tensor,x2:Number)-instance-method","html_id":"ldexp(x1:Tensor,x2:Number)-instance-method","name":"ldexp","doc":"Computes the ldexp of a `Tensor` with a scalar\nelementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.ldexp(t1, t2)\n```","summary":"<p>Computes the ldexp of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code> with a scalar elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"ldexp","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.ldexp(iter.next.value, x2)\nend\n"}},{"id":"ldexp(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","html_id":"ldexp(x1:Number,x2:Tensor,where:Tensor?=nil)-instance-method","name":"ldexp","doc":"ldexps a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.ldexp(x, t)\n```","summary":"<p>ldexps a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"args_string":"(x1 : Number, x2 : Tensor, where : Tensor? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"ldexp","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"},{"name":"where","doc":null,"default_value":"nil","external_name":"where","restriction":"Tensor | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  Math.ldexp(x2, iter.next.value)\nend\n"}},{"id":"ldexp-instance-method","html_id":"ldexp-instance-method","name":"ldexp","doc":"Returns the universal ldexp function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.ldexp # => <ufunc> ldexp","summary":"<p>Returns the universal ldexp function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L143","def":{"name":"ldexp","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_ldexp.new"}},{"id":"lgamma(x1:Tensor)-instance-method","html_id":"lgamma(x1:Tensor)-instance-method","name":"lgamma","doc":"Calculates the lgamma of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.lgamma(t1)\n```","summary":"<p>Calculates the lgamma of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"lgamma","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.lgamma(iter.next.value)\nend\n"}},{"id":"log(x1:Tensor)-instance-method","html_id":"log(x1:Tensor)-instance-method","name":"log","doc":"Calculates the log of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.log(t1)\n```","summary":"<p>Calculates the log of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"log","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.log(iter.next.value)\nend\n"}},{"id":"log10(x1:Tensor)-instance-method","html_id":"log10(x1:Tensor)-instance-method","name":"log10","doc":"Calculates the log10 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.log10(t1)\n```","summary":"<p>Calculates the log10 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"log10","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.log10(iter.next.value)\nend\n"}},{"id":"log1p(x1:Tensor)-instance-method","html_id":"log1p(x1:Tensor)-instance-method","name":"log1p","doc":"Calculates the log1p of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.log1p(t1)\n```","summary":"<p>Calculates the log1p of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"log1p","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.log1p(iter.next.value)\nend\n"}},{"id":"log2(x1:Tensor)-instance-method","html_id":"log2(x1:Tensor)-instance-method","name":"log2","doc":"Calculates the log2 of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.log2(t1)\n```","summary":"<p>Calculates the log2 of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"log2","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.log2(iter.next.value)\nend\n"}},{"id":"logb(x1:Tensor)-instance-method","html_id":"logb(x1:Tensor)-instance-method","name":"logb","doc":"Calculates the logb of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.logb(t1)\n```","summary":"<p>Calculates the logb of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"logb","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.logb(iter.next.value)\nend\n"}},{"id":"radians(x1:Tensor)-instance-method","html_id":"radians(x1:Tensor)-instance-method","name":"radians","doc":"Convert angles from degrees to radians\n\n```\nt = Tensor.new [30, 60, 90, 120]\n\nradians(t) # => Tensor[     0.524     1.047     1.571     2.094]\n```","summary":"<p>Convert angles from degrees to radians</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L166","def":{"name":"radians","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.size) do |_|\n  iter.next * (Math::PI / 180)\nend\n"}},{"id":"sin(x1:Tensor)-instance-method","html_id":"sin(x1:Tensor)-instance-method","name":"sin","doc":"Calculates the sin of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.sin(t1)\n```","summary":"<p>Calculates the sin of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"sin","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.sin(iter.next.value)\nend\n"}},{"id":"sinh(x1:Tensor)-instance-method","html_id":"sinh(x1:Tensor)-instance-method","name":"sinh","doc":"Calculates the sinh of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.sinh(t1)\n```","summary":"<p>Calculates the sinh of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"sinh","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.sinh(iter.next.value)\nend\n"}},{"id":"sqrt(x1:Tensor)-instance-method","html_id":"sqrt(x1:Tensor)-instance-method","name":"sqrt","doc":"Calculates the sqrt of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.sqrt(t1)\n```","summary":"<p>Calculates the sqrt of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"sqrt","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.sqrt(iter.next.value)\nend\n"}},{"id":"tan(x1:Tensor)-instance-method","html_id":"tan(x1:Tensor)-instance-method","name":"tan","doc":"Calculates the tan of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.tan(t1)\n```","summary":"<p>Calculates the tan of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"tan","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.tan(iter.next.value)\nend\n"}},{"id":"tanh(x1:Tensor)-instance-method","html_id":"tanh(x1:Tensor)-instance-method","name":"tanh","doc":"Calculates the tanh of a `Tensor`\n\n```\nt1 = Tensor.new [1, 2, 3]\n\nB.tanh(t1)\n```","summary":"<p>Calculates the tanh of a <code><a href=\"../../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"args_string":"(x1 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L30","def":{"name":"tanh","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"iter = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  Math.tanh(iter.next.value)\nend\n"}}],"macros":[{"id":"trig(names)-macro","html_id":"trig(names)-macro","name":"trig","doc":null,"summary":null,"abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(names)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L12","def":{"name":"trig","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% for name in names %}\n      # Calculates the {{ name }} of a `Tensor`\n      #\n      # ```\n      # t1 = Tensor.new [1, 2, 3]\n      #\n      # B.{{ name }}(t1)\n      # ```\n      def {{ name }}(x1 : Tensor)\n        iter = x1.unsafe_iter\n        Tensor.new(x1.shape) do |_|\n          Math.{{ name }}(iter.next.value)\n        end\n      end\n    {% end %}\n\n  \n"}},{"id":"trig2d(names)-macro","html_id":"trig2d(names)-macro","name":"trig2d","doc":null,"summary":null,"abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"args_string":"(names)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/trig.cr#L37","def":{"name":"trig2d","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% for name in names %}\n      # Computes the {{ name }} of two Tensors elementwise\n      #\n      # ```\n      # t1 = Tensor.new [1, 2, 3]\n      # t2 = Tensor.new [4, 5, 6]\n      #\n      # B.{{ name }}(t1, t2)\n      # ```\n      def {{ name }}(x1 : Tensor, x2 : Tensor)\n        if x1.shape != x2.shape\n          raise \"Shapes {#{x1.size}} and {#{x2.size} are not aligned\"\n        end\n\n        i1 = x1.unsafe_iter\n        i2 = x2.unsafe_iter\n\n        # TODO: Implement masking to use the *where* parameter\n        Tensor.new(x1.shape) do |_|\n          Math.{{ name }}(i1.next.value, i2.next.value)\n        end\n      end\n\n      # Computes the {{ name }} of a `Tensor` with a scalar\n      # elementwise\n      #\n      # ```\n      # t1 = Tensor.new [1, 2, 3]\n      # t2 = 5\n      #\n      # B.{{ name }}(t1, t2)\n      # ```\n      def {{ name }}(x1 : Tensor, x2 : Number)\n        iter = x1.unsafe_iter\n        Tensor.new(x1.shape) do |_|\n          Math.{{ name }}(iter.next.value, x2)\n        end\n      end\n\n      # {{ name }}s a scalar with a tensor elementwise.\n      #\n      # ```\n      # x = 5\n      # t = Tensor.new [1, 2, 3]\n      #\n      # B.{{ name }}(x, t)\n      # ```\n      def {{ name }}(x1 : Number, x2 : Tensor, where : Tensor? = nil)\n        iter = x2.unsafe_iter\n        Tensor.new(x2.shape) do |_|\n          Math.{{ name }}(x2, iter.next.value)\n        end\n      end\n\n      # Returns the universal {{ name }} function. Used to\n      # apply outer operations, reductions, and accumulations\n      # to tensors\n      #\n      # B.{{ name }} # => <ufunc> {{ name }}\n      def {{ name }}\n        UFunc_{{ name }}.new\n      end\n\n      # :nodoc:\n      struct UFunc_{{ name }}\n\n        # A basic string representation of a\n        # universal function.\n        #\n        # TODO: Add the same string representation\n        # to the functions the struct contains\n        def to_s(io)\n          io << \"<ufunc> {{ name }}\"\n        end\n\n        # Applies an outer operations between two `Tensor`s.\n        # Returns an MxN matrix where M is the size of *x1*,\n        # and N is the size of *x2*\n        #\n        # ```\n        # t = Tensor.new [1, 2]\n        #\n        # puts B.hypot.outer(t, t)\n        #\n        # # Matrix[[  2  3]\n        # #        [  3  4]]\n        # ```\n        def outer(x1 : Tensor, x2 : Tensor)\n          outer = x1.unsafe_iter\n          inner = x2.unsafe_iter\n          c1 = uninitialized U\n          c2 = uninitialized V\n          Tensor.new(x1.shape + x2.shape) do |i|\n            d = i % x2.size\n            if d == 0\n              c1 = outer.next.value\n              inner = x2.unsafe_iter\n            end\n            Math.{{ name }}(c1, inner.next.value)\n          end\n        end\n      end\n    {% end %}\n\n  \n"}}],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/UFunc","path":"Bottle/Internal/UFunc.html","kind":"module","full_name":"Bottle::Internal::UFunc","name":"UFunc","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"core/ufunc.cr","line_number":3,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/UFunc","kind":"module","full_name":"Bottle::Internal::UFunc","name":"UFunc"}],"subclasses":[],"including_types":[{"html_id":"github.com/crystal-data/bottle/Bottle/B","kind":"module","full_name":"Bottle::B","name":"B"}],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"add(x1:Tensor,x2:Number)-instance-method","html_id":"add(x1:Tensor,x2:Number)-instance-method","name":"add","doc":"adds a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.add(t1, t2)\n```","summary":"<p>adds a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L106","def":{"name":"add","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value + x2\nend\n"}},{"id":"add(x1:Number,x2:Tensor)-instance-method","html_id":"add(x1:Number,x2:Tensor)-instance-method","name":"add","doc":"adds a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.add(x, t)\n```","summary":"<p>adds a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L106","def":{"name":"add","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 + ret.next.value\nend\n"}},{"id":"add(x1:Tensor,x2:Tensor)-instance-method","html_id":"add(x1:Tensor,x2:Tensor)-instance-method","name":"add","doc":"adds two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.add(t1, t2)\n```","summary":"<p>adds two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L106","def":{"name":"add","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value + i2.next.value\nend\n"}},{"id":"add-instance-method","html_id":"add-instance-method","name":"add","doc":"Returns the universal add function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.add # => <ufunc> add","summary":"<p>Returns the universal add function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L106","def":{"name":"add","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_add.new"}},{"id":"divide-instance-method","html_id":"divide-instance-method","name":"divide","doc":"Returns the universal divide function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.divide # => <ufunc> divide","summary":"<p>Returns the universal divide function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L109","def":{"name":"divide","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_divide.new"}},{"id":"divide(x1:Tensor,x2:Tensor)-instance-method","html_id":"divide(x1:Tensor,x2:Tensor)-instance-method","name":"divide","doc":"divides two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.divide(t1, t2)\n```","summary":"<p>divides two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L109","def":{"name":"divide","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value / i2.next.value\nend\n"}},{"id":"divide(x1:Number,x2:Tensor)-instance-method","html_id":"divide(x1:Number,x2:Tensor)-instance-method","name":"divide","doc":"divides a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.divide(x, t)\n```","summary":"<p>divides a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L109","def":{"name":"divide","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 / ret.next.value\nend\n"}},{"id":"divide(x1:Tensor,x2:Number)-instance-method","html_id":"divide(x1:Tensor,x2:Number)-instance-method","name":"divide","doc":"divides a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.divide(t1, t2)\n```","summary":"<p>divides a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L109","def":{"name":"divide","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value / x2\nend\n"}},{"id":"equal(x1:Tensor,x2:Tensor)-instance-method","html_id":"equal(x1:Tensor,x2:Tensor)-instance-method","name":"equal","doc":"equals two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.equal(t1, t2)\n```","summary":"<p>equals two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L113","def":{"name":"equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value == i2.next.value\nend\n"}},{"id":"equal(x1:Number,x2:Tensor)-instance-method","html_id":"equal(x1:Number,x2:Tensor)-instance-method","name":"equal","doc":"equals a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.equal(x, t)\n```","summary":"<p>equals a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L113","def":{"name":"equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 == ret.next.value\nend\n"}},{"id":"equal(x1:Tensor,x2:Number)-instance-method","html_id":"equal(x1:Tensor,x2:Number)-instance-method","name":"equal","doc":"equals a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.equal(t1, t2)\n```","summary":"<p>equals a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L113","def":{"name":"equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value == x2\nend\n"}},{"id":"equal-instance-method","html_id":"equal-instance-method","name":"equal","doc":"Returns the universal equal function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.equal # => <ufunc> equal","summary":"<p>Returns the universal equal function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L113","def":{"name":"equal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_equal.new"}},{"id":"floordiv-instance-method","html_id":"floordiv-instance-method","name":"floordiv","doc":"Returns the universal floordiv function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.floordiv # => <ufunc> floordiv","summary":"<p>Returns the universal floordiv function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L111","def":{"name":"floordiv","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_floordiv.new"}},{"id":"floordiv(x1:Tensor,x2:Tensor)-instance-method","html_id":"floordiv(x1:Tensor,x2:Tensor)-instance-method","name":"floordiv","doc":"floordivs two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.floordiv(t1, t2)\n```","summary":"<p>floordivs two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L111","def":{"name":"floordiv","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value // i2.next.value\nend\n"}},{"id":"floordiv(x1:Number,x2:Tensor)-instance-method","html_id":"floordiv(x1:Number,x2:Tensor)-instance-method","name":"floordiv","doc":"floordivs a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.floordiv(x, t)\n```","summary":"<p>floordivs a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L111","def":{"name":"floordiv","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 // ret.next.value\nend\n"}},{"id":"floordiv(x1:Tensor,x2:Number)-instance-method","html_id":"floordiv(x1:Tensor,x2:Number)-instance-method","name":"floordiv","doc":"floordivs a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.floordiv(t1, t2)\n```","summary":"<p>floordivs a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L111","def":{"name":"floordiv","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value // x2\nend\n"}},{"id":"greater(x1:Tensor,x2:Number)-instance-method","html_id":"greater(x1:Tensor,x2:Number)-instance-method","name":"greater","doc":"greaters a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.greater(t1, t2)\n```","summary":"<p>greaters a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L114","def":{"name":"greater","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value > x2\nend\n"}},{"id":"greater(x1:Number,x2:Tensor)-instance-method","html_id":"greater(x1:Number,x2:Tensor)-instance-method","name":"greater","doc":"greaters a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.greater(x, t)\n```","summary":"<p>greaters a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L114","def":{"name":"greater","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 > ret.next.value\nend\n"}},{"id":"greater(x1:Tensor,x2:Tensor)-instance-method","html_id":"greater(x1:Tensor,x2:Tensor)-instance-method","name":"greater","doc":"greaters two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.greater(t1, t2)\n```","summary":"<p>greaters two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L114","def":{"name":"greater","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value > i2.next.value\nend\n"}},{"id":"greater-instance-method","html_id":"greater-instance-method","name":"greater","doc":"Returns the universal greater function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.greater # => <ufunc> greater","summary":"<p>Returns the universal greater function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L114","def":{"name":"greater","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_greater.new"}},{"id":"greater_equal(x1:Tensor,x2:Number)-instance-method","html_id":"greater_equal(x1:Tensor,x2:Number)-instance-method","name":"greater_equal","doc":"greater_equals a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.greater_equal(t1, t2)\n```","summary":"<p>greater_equals a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L115","def":{"name":"greater_equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value >= x2\nend\n"}},{"id":"greater_equal(x1:Number,x2:Tensor)-instance-method","html_id":"greater_equal(x1:Number,x2:Tensor)-instance-method","name":"greater_equal","doc":"greater_equals a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.greater_equal(x, t)\n```","summary":"<p>greater_equals a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L115","def":{"name":"greater_equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 >= ret.next.value\nend\n"}},{"id":"greater_equal(x1:Tensor,x2:Tensor)-instance-method","html_id":"greater_equal(x1:Tensor,x2:Tensor)-instance-method","name":"greater_equal","doc":"greater_equals two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.greater_equal(t1, t2)\n```","summary":"<p>greater_equals two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L115","def":{"name":"greater_equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value >= i2.next.value\nend\n"}},{"id":"greater_equal-instance-method","html_id":"greater_equal-instance-method","name":"greater_equal","doc":"Returns the universal greater_equal function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.greater_equal # => <ufunc> greater_equal","summary":"<p>Returns the universal greater_equal function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L115","def":{"name":"greater_equal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_greater_equal.new"}},{"id":"less-instance-method","html_id":"less-instance-method","name":"less","doc":"Returns the universal less function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.less # => <ufunc> less","summary":"<p>Returns the universal less function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L116","def":{"name":"less","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_less.new"}},{"id":"less(x1:Tensor,x2:Number)-instance-method","html_id":"less(x1:Tensor,x2:Number)-instance-method","name":"less","doc":"lesss a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.less(t1, t2)\n```","summary":"<p>lesss a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L116","def":{"name":"less","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value < x2\nend\n"}},{"id":"less(x1:Number,x2:Tensor)-instance-method","html_id":"less(x1:Number,x2:Tensor)-instance-method","name":"less","doc":"lesss a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.less(x, t)\n```","summary":"<p>lesss a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L116","def":{"name":"less","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 < ret.next.value\nend\n"}},{"id":"less(x1:Tensor,x2:Tensor)-instance-method","html_id":"less(x1:Tensor,x2:Tensor)-instance-method","name":"less","doc":"lesss two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.less(t1, t2)\n```","summary":"<p>lesss two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L116","def":{"name":"less","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value < i2.next.value\nend\n"}},{"id":"less_equal(x1:Tensor,x2:Tensor)-instance-method","html_id":"less_equal(x1:Tensor,x2:Tensor)-instance-method","name":"less_equal","doc":"less_equals two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.less_equal(t1, t2)\n```","summary":"<p>less_equals two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L117","def":{"name":"less_equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value <= i2.next.value\nend\n"}},{"id":"less_equal(x1:Number,x2:Tensor)-instance-method","html_id":"less_equal(x1:Number,x2:Tensor)-instance-method","name":"less_equal","doc":"less_equals a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.less_equal(x, t)\n```","summary":"<p>less_equals a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L117","def":{"name":"less_equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 <= ret.next.value\nend\n"}},{"id":"less_equal(x1:Tensor,x2:Number)-instance-method","html_id":"less_equal(x1:Tensor,x2:Number)-instance-method","name":"less_equal","doc":"less_equals a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.less_equal(t1, t2)\n```","summary":"<p>less_equals a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L117","def":{"name":"less_equal","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value <= x2\nend\n"}},{"id":"less_equal-instance-method","html_id":"less_equal-instance-method","name":"less_equal","doc":"Returns the universal less_equal function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.less_equal # => <ufunc> less_equal","summary":"<p>Returns the universal less_equal function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L117","def":{"name":"less_equal","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_less_equal.new"}},{"id":"modulo-instance-method","html_id":"modulo-instance-method","name":"modulo","doc":"Returns the universal modulo function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.modulo # => <ufunc> modulo","summary":"<p>Returns the universal modulo function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L112","def":{"name":"modulo","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_modulo.new"}},{"id":"modulo(x1:Tensor,x2:Number)-instance-method","html_id":"modulo(x1:Tensor,x2:Number)-instance-method","name":"modulo","doc":"modulos a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.modulo(t1, t2)\n```","summary":"<p>modulos a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L112","def":{"name":"modulo","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value % x2\nend\n"}},{"id":"modulo(x1:Number,x2:Tensor)-instance-method","html_id":"modulo(x1:Number,x2:Tensor)-instance-method","name":"modulo","doc":"modulos a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.modulo(x, t)\n```","summary":"<p>modulos a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L112","def":{"name":"modulo","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 % ret.next.value\nend\n"}},{"id":"modulo(x1:Tensor,x2:Tensor)-instance-method","html_id":"modulo(x1:Tensor,x2:Tensor)-instance-method","name":"modulo","doc":"modulos two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.modulo(t1, t2)\n```","summary":"<p>modulos two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L112","def":{"name":"modulo","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value % i2.next.value\nend\n"}},{"id":"multiply(x1:Tensor,x2:Tensor)-instance-method","html_id":"multiply(x1:Tensor,x2:Tensor)-instance-method","name":"multiply","doc":"multiplys two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.multiply(t1, t2)\n```","summary":"<p>multiplys two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L108","def":{"name":"multiply","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value * i2.next.value\nend\n"}},{"id":"multiply(x1:Number,x2:Tensor)-instance-method","html_id":"multiply(x1:Number,x2:Tensor)-instance-method","name":"multiply","doc":"multiplys a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.multiply(x, t)\n```","summary":"<p>multiplys a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L108","def":{"name":"multiply","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 * ret.next.value\nend\n"}},{"id":"multiply(x1:Tensor,x2:Number)-instance-method","html_id":"multiply(x1:Tensor,x2:Number)-instance-method","name":"multiply","doc":"multiplys a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.multiply(t1, t2)\n```","summary":"<p>multiplys a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L108","def":{"name":"multiply","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value * x2\nend\n"}},{"id":"multiply-instance-method","html_id":"multiply-instance-method","name":"multiply","doc":"Returns the universal multiply function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.multiply # => <ufunc> multiply","summary":"<p>Returns the universal multiply function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L108","def":{"name":"multiply","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_multiply.new"}},{"id":"power-instance-method","html_id":"power-instance-method","name":"power","doc":"Returns the universal power function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.power # => <ufunc> power","summary":"<p>Returns the universal power function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L110","def":{"name":"power","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_power.new"}},{"id":"power(x1:Tensor,x2:Tensor)-instance-method","html_id":"power(x1:Tensor,x2:Tensor)-instance-method","name":"power","doc":"powers two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.power(t1, t2)\n```","summary":"<p>powers two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L110","def":{"name":"power","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value ** i2.next.value\nend\n"}},{"id":"power(x1:Number,x2:Tensor)-instance-method","html_id":"power(x1:Number,x2:Tensor)-instance-method","name":"power","doc":"powers a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.power(x, t)\n```","summary":"<p>powers a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L110","def":{"name":"power","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 ** ret.next.value\nend\n"}},{"id":"power(x1:Tensor,x2:Number)-instance-method","html_id":"power(x1:Tensor,x2:Number)-instance-method","name":"power","doc":"powers a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.power(t1, t2)\n```","summary":"<p>powers a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L110","def":{"name":"power","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value ** x2\nend\n"}},{"id":"subtract-instance-method","html_id":"subtract-instance-method","name":"subtract","doc":"Returns the universal subtract function. Used to\napply outer operations, reductions, and accumulations\nto tensors\n\nB.subtract # => <ufunc> subtract","summary":"<p>Returns the universal subtract function.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L107","def":{"name":"subtract","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UFunc_subtract.new"}},{"id":"subtract(x1:Tensor,x2:Tensor)-instance-method","html_id":"subtract(x1:Tensor,x2:Tensor)-instance-method","name":"subtract","doc":"subtracts two tensors with each other elementwise\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = Tensor.new [4, 5, 6]\n\nB.subtract(t1, t2)\n```","summary":"<p>subtracts two tensors with each other elementwise</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Tensor, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L107","def":{"name":"subtract","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x1.shape != x2.shape\n  raise(\"Shapes {#{x1.shape}} and {#{x2.shape} are not aligned\")\nend\ni1 = x1.unsafe_iter\ni2 = x2.unsafe_iter\nTensor.new(x1.shape) do |_|\n  i1.next.value - i2.next.value\nend\n"}},{"id":"subtract(x1:Number,x2:Tensor)-instance-method","html_id":"subtract(x1:Number,x2:Tensor)-instance-method","name":"subtract","doc":"subtracts a scalar with a tensor elementwise.\n\n```\nx = 5\nt = Tensor.new [1, 2, 3]\n\nB.subtract(x, t)\n```","summary":"<p>subtracts a scalar with a tensor elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"args_string":"(x1 : Number, x2 : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L107","def":{"name":"subtract","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Number"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x2.unsafe_iter\nTensor.new(x2.shape) do |_|\n  x1 - ret.next.value\nend\n"}},{"id":"subtract(x1:Tensor,x2:Number)-instance-method","html_id":"subtract(x1:Tensor,x2:Number)-instance-method","name":"subtract","doc":"subtracts a tensor with a scalar elementwise.\n\n```\nt1 = Tensor.new [1, 2, 3]\nt2 = 5\n\nB.subtract(t1, t2)\n```","summary":"<p>subtracts a tensor with a scalar elementwise.</p>","abstract":false,"args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"args_string":"(x1 : Tensor, x2 : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L107","def":{"name":"subtract","args":[{"name":"x1","doc":null,"default_value":"","external_name":"x1","restriction":"Tensor"},{"name":"x2","doc":null,"default_value":"","external_name":"x2","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = x1.unsafe_iter\nTensor.new(x1.shape) do |_|\n  ret.next.value - x2\nend\n"}}],"macros":[{"id":"ufunc(operator,name)-macro","html_id":"ufunc(operator,name)-macro","name":"ufunc","doc":null,"summary":null,"abstract":false,"args":[{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(operator, name)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ufunc.cr#L6","def":{"name":"ufunc","args":[{"name":"operator","doc":null,"default_value":"","external_name":"operator","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n# \n{{ name }}\ns two tensors with each other elementwise\n\n    \n#\n\n    \n# ```\n\n    \n# t1 = Tensor.new [1, 2, 3]\n\n    \n# t2 = Tensor.new [4, 5, 6]\n\n    \n#\n\n    \n# B.\n{{ name }}\n(t1, t2)\n\n    \n# ```\n\n    def \n{{ name }}\n(x1 : Tensor, x2 : Tensor)\n      if x1.shape != x2.shape\n        raise \"Shapes \n{#{x1.shape}} and \n{#{x2.shape} are not aligned\"\n      \nend\n      i1 = x1.unsafe_iter\n      i2 = x2.unsafe_iter\n      Tensor.new(x1.shape) do |_|\n        i1.next.value \n{{ operator.id }}\n i2.next.value\n      \nend\n    \nend\n\n    \n# \n{{ name }}\ns a tensor with a scalar elementwise.\n\n    \n#\n\n    \n# ```\n\n    \n# t1 = Tensor.new [1, 2, 3]\n\n    \n# t2 = 5\n\n    \n#\n\n    \n# B.\n{{ name }}\n(t1, t2)\n\n    \n# ```\n\n    def \n{{ name }}\n(x1 : Tensor, x2 : Number)\n      ret = x1.unsafe_iter\n      Tensor.new(x1.shape) do |_|\n        ret.next.value \n{{ operator.id }}\n x2\n      \nend\n    \nend\n\n    \n# \n{{ name }}\ns a scalar with a tensor elementwise.\n\n    \n#\n\n    \n# ```\n\n    \n# x = 5\n\n    \n# t = Tensor.new [1, 2, 3]\n\n    \n#\n\n    \n# B.\n{{ name }}\n(x, t)\n\n    \n# ```\n\n    def \n{{ name }}\n(x1 : Number, x2 : Tensor)\n      ret = x2.unsafe_iter\n      Tensor.new(x2.shape) do |_|\n        x1 \n{{ operator.id }}\n ret.next.value\n      \nend\n    \nend\n\n    \n# Returns the universal \n{{ name }}\n function. Used to\n\n    \n# apply outer operations, reductions, and accumulations\n\n    \n# to tensors\n\n    \n#\n\n    \n# B.\n{{ name }}\n # => <ufunc> \n{{ name }}\n\n\n    def \n{{ name }}\n\n      UFunc_\n{{ name }}\n.new\n    \nend\n\n    \n# :nodoc:\n\n    struct UFunc_\n{{ name }}\n\n\n      \n# A basic string representation of a\n\n      \n# universal function.\n\n      \n#\n\n      \n# TODO: Add the same string representation\n\n      \n# to the functions the struct contains\n\n      def to_s(io)\n        io << \"<ufunc> \n{{ name }}\n\"\n      \nend\n\n      \n# Applies an outer operations between two `Tensor`s.\n\n      \n# Returns an MxN matrix where M is the size of *x1*,\n\n      \n# and N is the size of *x2*\n\n      \n#\n\n      \n# ```\n\n      \n# t = Tensor.new [1, 2]\n\n      \n#\n\n      \n# p B.add.outer(t, t)\n\n      \n#\n\n      \n# # Matrix[[  2  3]\n\n      \n# #        [  3  4]]\n\n      \n# ```\n\n      def outer(x1 : Tensor(U), x2 : Tensor(V)) forall U, V\n        outer = x1.unsafe_iter\n        inner = x2.unsafe_iter\n        c1 = uninitialized U\n        c2 = uninitialized V\n        Tensor.new(x1.shape + x2.shape) do |i|\n          d = i % x2.size\n          if d == 0\n            c1 = outer.next.value\n            inner = x2.unsafe_iter\n          \nend\n          c1 \n{{ operator.id }}\n inner.next.value\n        \nend\n      \nend\n    \nend\n  \n"}}],"types":[]},{"html_id":"github.com/crystal-data/bottle/Bottle/Internal/UnsafeIter","path":"Bottle/Internal/UnsafeIter.html","kind":"struct","full_name":"Bottle::Internal::UnsafeIter(T)","name":"UnsafeIter","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"},{"html_id":"github.com/crystal-data/bottle/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/crystal-data/bottle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core/nditer.cr","line_number":80,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Iterator","kind":"module","full_name":"Iterator","name":"Iterator"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(t:Bottle::Tensor(T))-class-method","html_id":"new(t:Bottle::Tensor(T))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Bottle::Tensor(T)"}],"args_string":"(t : Bottle::Tensor(T))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L111","def":{"name":"new","args":[{"name":"t","doc":null,"default_value":"","external_name":"t","restriction":"Bottle::Tensor(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = UnsafeIter(T).allocate\n_.initialize(t)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"ndnext-instance-method","html_id":"ndnext-instance-method","name":"ndnext","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L133","def":{"name":"ndnext","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"v = @ndims - 1\nnext_index = @next_index\n@last_index = next_index\nv.step(to: 0, by: -1) do |i|\n  __temp_26 = i\n  @track[__temp_26] = @track[__temp_26] + 1\n  shape_i = @shape[i]\n  stride_i = @strides[i]\n  if @track[i] == shape_i\n    if i == 0\n      @done = true\n    end\n    @track[i] = 0\n    next_index = next_index - ((shape_i - 1) * stride_i)\n    next\n  end\n  next_index = next_index + stride_i\n  break\nend\n@next_index = next_index\n@last_index\n"}},{"id":"next-instance-method","html_id":"next-instance-method","name":"next","doc":"Returns the next element in this iterator, or `Iterator::Stop::INSTANCE` if there\nare no more elements.","summary":"<p>Returns the next element in this iterator, or <code>Iterator::Stop::INSTANCE</code> if there are no more elements.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L123","def":{"name":"next","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@contiguous ? onednext : ndnext"}},{"id":"onednext-instance-method","html_id":"onednext-instance-method","name":"onednext","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L127","def":{"name":"onednext","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@last_index = @next_index\n@next_index = @next_index + @strides[-1]\n@last_index\n"}},{"id":"rewind(buffer:Pointer(T))-instance-method","html_id":"rewind(buffer:Pointer(T))-instance-method","name":"rewind","doc":null,"summary":null,"abstract":false,"args":[{"name":"buffer","doc":null,"default_value":"","external_name":"buffer","restriction":"Pointer(T)"}],"args_string":"(buffer : Pointer(T))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/nditer.cr#L159","def":{"name":"rewind","args":[{"name":"buffer","doc":null,"default_value":"","external_name":"buffer","restriction":"Pointer(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@done = false\n@track = Pointer(Int32).malloc(@ndims, 0)\n@last_index = @buffer\n@next_index = @buffer\n"}}],"macros":[],"types":[]}]},{"html_id":"github.com/crystal-data/bottle/Bottle/Tensor","path":"Bottle/Tensor.html","kind":"struct","full_name":"Bottle::Tensor(T)","name":"Tensor","abstract":false,"superclass":{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"},{"html_id":"github.com/crystal-data/bottle/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"github.com/crystal-data/bottle/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"github.com/crystal-data/bottle/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"core/ndtensor.cr","line_number":31,"url":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr"}],"repository_name":"github.com/crystal-data/bottle","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/crystal-data/bottle/Bottle/Internal","kind":"module","full_name":"Bottle::Internal","name":"Internal"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/crystal-data/bottle/Bottle","kind":"module","full_name":"Bottle","name":"Bottle"},"doc":null,"summary":null,"class_methods":[{"id":"random(r:Range(U,U),_shape:Array(Int32))forallU-class-method","html_id":"random(r:Range(U,U),_shape:Array(Int32))forallU-class-method","name":"random","doc":"A flexible method to create `Tensor`'s of arbitrary shapes\nfilled with random values of arbitrary types.  Since\nRanges can contain any dtype, the type of tensor is\ninferred from the passed range, and a new `Tensor` is\nsampled using the provided shape.\n\n```\nt = Tensor.random(0...10, [2, 2])\nt # =>\nTensor([[5, 9],\n        [3, 9]])\n```","summary":"<p>A flexible method to create <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>'s of arbitrary shapes filled with random values of arbitrary types.</p>","abstract":false,"args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Range(U, U)"},{"name":"_shape","doc":null,"default_value":"","external_name":"_shape","restriction":"Array(Int32)"}],"args_string":"(r : Range(U, U), _shape : Array(Int32)) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L125","def":{"name":"random","args":[{"name":"r","doc":null,"default_value":"","external_name":"r","restriction":"Range(U, U)"},{"name":"_shape","doc":null,"default_value":"","external_name":"_shape","restriction":"Array(Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(_shape) do |_|\n  Random.rand(r)\nend"}}],"constructors":[{"id":"new(nrows:Int32,ncols:Int32,&block:Int32,Int32->T)-class-method","html_id":"new(nrows:Int32,ncols:Int32,&amp;block:Int32,Int32-&gt;T)-class-method","name":"new","doc":"Yields a `Tensor` from a provided number of rows and columns.\nThis can quickly create matrices, useful for several `Tensor` creattion\nmethods such as the underlying implementation of `eye`, and `diag`.\n\nThis method does provide *i* and *j* variables for the passed block,\nso no offset calculations need to be done by the user.\n\n```\nt = Tensor.new(3, 3) { |i, j| i == j ? 1 : 0 }\nt # =>\nTensor([[1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])\n```","summary":"<p>Yields a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> from a provided number of rows and columns.</p>","abstract":false,"args":[{"name":"nrows","doc":null,"default_value":"","external_name":"nrows","restriction":"Int32"},{"name":"ncols","doc":null,"default_value":"","external_name":"ncols","restriction":"Int32"}],"args_string":"(nrows : Int32, ncols : Int32, &block : Int32, Int32 -> T)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L104","def":{"name":"new","args":[{"name":"nrows","doc":null,"default_value":"","external_name":"nrows","restriction":"Int32"},{"name":"ncols","doc":null,"default_value":"","external_name":"ncols","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Int32, Int32 -> T)"},"return_type":"","visibility":"Public","body":"data = Pointer(T).malloc(nrows * ncols) do |idx|\n  i = idx // ncols\n  j = idx % ncols\n  yield i, j\nend\nnew([nrows, ncols], ArrayFlags::Contiguous, data)\n"}},{"id":"new(_shape:Array(Int32),&block:Int32->U)forallU-class-method","html_id":"new(_shape:Array(Int32),&amp;block:Int32-&gt;U)forallU-class-method","name":"new","doc":"Yields a `Tensor` from a provided shape and a block.  The block only\nprovides the absolute index, not an index dependent on the shape,\nso if a user wants to handle an arbitrary shape inside the block\nthey need to do that themselves.\n\n```\nt = Tensor.new([2, 2, 3]) { |i| i / 2 }\nt # =>\nTensor([[[ 0,  1],\n         [ 2,  3]],\n\n        [[ 4,  5],\n         [ 6,  7]],\n\n        [[ 8,  9],\n         [10, 11]]])\n```","summary":"<p>Yields a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> from a provided shape and a block.</p>","abstract":false,"args":[{"name":"_shape","doc":null,"default_value":"","external_name":"_shape","restriction":"Array(Int32)"}],"args_string":"(_shape : Array(Int32), &block : Int32 -> U) forall U","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L82","def":{"name":"new","args":[{"name":"_shape","doc":null,"default_value":"","external_name":"_shape","restriction":"Array(Int32)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Int32 -> U)"},"return_type":"","visibility":"Public","body":"total = _shape.reduce do |i, j|\n  i * j\nend\nptr = Pointer(U).malloc(total) do |i|\n  yield i\nend\nnew(_shape, ArrayFlags::Contiguous, ptr)\n"}},{"id":"new(buffer,shape,strides,flags,base)-class-method","html_id":"new(buffer,shape,strides,flags,base)-class-method","name":"new","doc":"Internal method to create tensors from low level libraries.\nThis does no validation on inputs and is very unsafe unless\ncalled by the library.\n\nShould not be used by the external API.","summary":"<p>Internal method to create tensors from low level libraries.</p>","abstract":false,"args":[{"name":"buffer","doc":null,"default_value":"","external_name":"buffer","restriction":""},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""},{"name":"strides","doc":null,"default_value":"","external_name":"strides","restriction":""},{"name":"flags","doc":null,"default_value":"","external_name":"flags","restriction":""},{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":""}],"args_string":"(buffer, shape, strides, flags, base)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L207","def":{"name":"new","args":[{"name":"buffer","doc":null,"default_value":"","external_name":"buffer","restriction":""},{"name":"shape","doc":null,"default_value":"","external_name":"shape","restriction":""},{"name":"strides","doc":null,"default_value":"","external_name":"strides","restriction":""},{"name":"flags","doc":null,"default_value":"","external_name":"flags","restriction":""},{"name":"base","doc":null,"default_value":"","external_name":"base","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Tensor(T).allocate\n_.initialize(buffer, shape, strides, flags, base)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(_shape:Array(Int32),order:ArrayFlags=ArrayFlags::Contiguous,ptr:Pointer(T)?=nil)-class-method","html_id":"new(_shape:Array(Int32),order:ArrayFlags=ArrayFlags::Contiguous,ptr:Pointer(T)?=nil)-class-method","name":"new","doc":"Creates a `Tensor` from a provided shape and order.\nIf a pointer to data is passed, no validation ensures\nthat the memory layout matches the passed order, so\nthis method is considered \"unsafe\".\n\nPrimarily used by internal methods, however this can be used to\ncreate empty `Tensors`, although the publicly\nfacing methods should be preferred.\n\n```\nt = Tensor(Int32).new([2, 2, 3], order: ArrayFlags::Fortran)\nt # =>\nTensor([[[0, 0, 0],\n         [0, 0, 0]],\n\n        [[0, 0, 0],\n         [0, 0, 0]]])\n```","summary":"<p>Creates a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> from a provided shape and order.</p>","abstract":false,"args":[{"name":"_shape","doc":null,"default_value":"","external_name":"_shape","restriction":"Array(Int32)"},{"name":"order","doc":null,"default_value":"ArrayFlags::Contiguous","external_name":"order","restriction":"ArrayFlags"},{"name":"ptr","doc":null,"default_value":"nil","external_name":"ptr","restriction":"Pointer(T) | ::Nil"}],"args_string":"(_shape : Array(Int32), order : ArrayFlags = <span class=\"t\">ArrayFlags</span><span class=\"t\">::</span><span class=\"t\">Contiguous</span>, ptr : Pointer(T)? = <span class=\"n\">nil</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L147","def":{"name":"new","args":[{"name":"_shape","doc":null,"default_value":"","external_name":"_shape","restriction":"Array(Int32)"},{"name":"order","doc":null,"default_value":"ArrayFlags::Contiguous","external_name":"order","restriction":"ArrayFlags"},{"name":"ptr","doc":null,"default_value":"nil","external_name":"ptr","restriction":"Pointer(T) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = Tensor(T).allocate\n_.initialize(_shape, order, ptr)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"*(other:Number)-instance-method","html_id":"*(other:Number)-instance-method","name":"*","doc":"Elementwise multiplication of a Tensor to a scalar\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = 2\nf1 + f2 # => [2.0, 4.0, 6.0]\n```","summary":"<p>Elementwise multiplication of a Tensor to a scalar</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L827","def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.multiply(self, other)"}},{"id":"*(other:Tensor)-instance-method","html_id":"*(other:Tensor)-instance-method","name":"*","doc":"Elementwise multiplication of a Tensor to another equally sized Tensor\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = Tensor.new [2.0, 4.0, 6.0]\nf1 * f2 # => [3.0, 8.0, 18.0]\n```","summary":"<p>Elementwise multiplication of a Tensor to another equally sized Tensor</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"args_string":"(other : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L816","def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.multiply(self, other)"}},{"id":"+(other:Tensor)-instance-method","html_id":"+(other:Tensor)-instance-method","name":"+","doc":"Elementwise addition of a Tensor to another equally sized Tensor\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = Tensor.new [2.0, 4.0, 6.0]\nf1 + f2 # => [3.0, 6.0, 9.0]\n```","summary":"<p>Elementwise addition of a Tensor to another equally sized Tensor</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"args_string":"(other : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L772","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.add(self, other)"}},{"id":"+(other:Number)-instance-method","html_id":"+(other:Number)-instance-method","name":"+","doc":"Elementwise addition of a Tensor to a scalar\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = 2\nf1 + f2 # => [3.0, 4.0, 5.0]\n```","summary":"<p>Elementwise addition of a Tensor to a scalar</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L783","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.add(self, other)"}},{"id":"-(other:Number)-instance-method","html_id":"-(other:Number)-instance-method","name":"-","doc":"Elementwise subtraction of a Tensor with a scalar\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = 2\nf1 - f2 # => [-1.0, 0.0, 1.0]\n```","summary":"<p>Elementwise subtraction of a Tensor with a scalar</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L805","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.subtract(self, other)"}},{"id":"-(other:Tensor)-instance-method","html_id":"-(other:Tensor)-instance-method","name":"-","doc":"Elementwise subtraction of a Tensor to another equally sized Tensor\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = Tensor.new [2.0, 4.0, 6.0]\nf1 - f2 # => [-1.0, -2.0, -3.0]\n```","summary":"<p>Elementwise subtraction of a Tensor to another equally sized Tensor</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"args_string":"(other : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L794","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.subtract(self, other)"}},{"id":"/(other:Number)-instance-method","html_id":"/(other:Number)-instance-method","name":"/","doc":"Elementwise division of a Tensor to a scalar\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = 2\nf1 / f2 # => [0.5, 1, 1.5]\n```","summary":"<p>Elementwise division of a Tensor to a scalar</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L849","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.divide(self, other)"}},{"id":"/(other:Tensor)-instance-method","html_id":"/(other:Tensor)-instance-method","name":"/","doc":"Elementwise division of a Tensor to another equally sized Tensor\n\n```\nf1 = Tensor.new [1.0, 2.0, 3.0]\nf2 = Tensor.new [2.0, 4.0, 6.0]\nf1 / f2 # => [0.5, 0.5, 0.5]\n```","summary":"<p>Elementwise division of a Tensor to another equally sized Tensor</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"args_string":"(other : Tensor)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L838","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tensor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::UFunc.divide(self, other)"}},{"id":"[](indexer:Array(Int32))-instance-method","html_id":"[](indexer:Array(Int32))-instance-method","name":"[]","doc":"An indexing method for an array of Integers\nthat produce a scalar.  I need to find a good\nway to handle a case where the user provides\na list that is less than the dimensions of\nthe array, and needs to return an NTensor slice\n\n```\na = Tensor.new([2, 3, 2]) { |i| i }\na[[0, 1, 0]] # => 8\n```","summary":"<p>An indexing method for an array of Integers that produce a scalar.</p>","abstract":false,"args":[{"name":"indexer","doc":null,"default_value":"","external_name":"indexer","restriction":"Array(Int32)"}],"args_string":"(indexer : Array(Int32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L265","def":{"name":"[]","args":[{"name":"indexer","doc":null,"default_value":"","external_name":"indexer","restriction":"Array(Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"offset = 0\nstrides.zip(indexer) do |i, j|\n  offset = offset + (i * j)\nend\n@buffer[offset]\n"}},{"id":"[](*args)-instance-method","html_id":"[](*args)-instance-method","name":"[]","doc":"Returns a view of a NTensor from a list of indices or\nranges.\n\n```\nt = Tensor.new([2, 4, 4]) { |i| i }\n```","summary":"<p>Returns a view of a NTensor from a list of indices or ranges.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L306","def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"idx = args.to_a\nfill = ndims - idx.size\nidx = idx + ([...] * fill)\nslice_from_indexers(idx)\n"}},{"id":"[]=(idx:Array,assign:T)-instance-method","html_id":"[]=(idx:Array,assign:T)-instance-method","name":"[]=","doc":"Assigns a scalar value to a slice of a `Tensor`.\nThe value is tiled along the entire slice.\n\n```\nt = Tensor.new([2, 2, 3]) { |i| i }\nt[[1]] = 99\nt #=>\nTensor([[[ 0,  1],\n         [ 2,  3]],\n\n        [[99, 99],\n         [99, 99]],\n\n        [[99, 99],\n         [99, 99]]])\n```","summary":"<p>Assigns a scalar value to a slice of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>.</p>","abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array"},{"name":"assign","doc":null,"default_value":"","external_name":"assign","restriction":"T"}],"args_string":"(idx : Array, assign : T)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L359","def":{"name":"[]=","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array"},{"name":"assign","doc":null,"default_value":"","external_name":"assign","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fill = ndims - idx.size\nidx = idx + ([...] * fill)\nold = slice_from_indexers(idx)\nold.flat_iter.each do |i|\n  i.value = assign\nend\n"}},{"id":"[]=(idx:Array,assign:Bottle::Tensor(T))-instance-method","html_id":"[]=(idx:Array,assign:Bottle::Tensor(T))-instance-method","name":"[]=","doc":"Assigns a `Tensor` to a slice of an array.\nThe provided tensor must be the same shape\nas the slice in order for this method to\nwork.\n\n```\nt = Tensor.new([3, 2, 2]) { |i| i }\nt[[1]] = Tensor.new([2, 2]) { |i| i * 20 }\nt # =>\nTensor([[[ 0,  1],\n         [ 2,  3]],\n\n        [[ 0, 20],\n         [40, 60]],\n\n        [[ 8,  9],\n         [10, 11]]])\n```","summary":"<p>Assigns a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> to a slice of an array.</p>","abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array"},{"name":"assign","doc":null,"default_value":"","external_name":"assign","restriction":"Tensor(T)"}],"args_string":"(idx : Array, assign : Bottle::Tensor(T))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L334","def":{"name":"[]=","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array"},{"name":"assign","doc":null,"default_value":"","external_name":"assign","restriction":"Tensor(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fill = ndims - idx.size\nidx = idx + ([...] * fill)\nold = slice_from_indexers(idx)\nold.flat_iter.zip(assign.flat_iter) do |i, j|\n  i.value = j.value\nend\n"}},{"id":"[]=(indexer:Array(Int32),value:Number)-instance-method","html_id":"[]=(indexer:Array(Int32),value:Number)-instance-method","name":"[]=","doc":"Sets a single value in a `Tensor` based on\nthe provided index.  Casting will occur\nso that the number matches the type of the\nTensor.\n\n```\na = B.arange(10)\na[[1]] = 100\na # => Tensor([  0, 100,   2,   3,   4,   5,   6,   7,   8,   9])\n```","summary":"<p>Sets a single value in a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> based on the provided index.</p>","abstract":false,"args":[{"name":"indexer","doc":null,"default_value":"","external_name":"indexer","restriction":"Array(Int32)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"}],"args_string":"(indexer : Array(Int32), value : Number)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L283","def":{"name":"[]=","args":[{"name":"indexer","doc":null,"default_value":"","external_name":"indexer","restriction":"Array(Int32)"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if indexer.size < strides.size\n  fill = ndims - indexer.size\n  indexer = indexer + ([...] * fill)\n  old = slice_from_indexers(indexer)\n  old.flat_iter.each do |i|\n    i.value = T.new(value)\n  end\nelse\n  offset = 0\n  strides.zip(indexer) do |i, j|\n    offset = offset + (i * j)\n  end\n  @buffer[offset] = T.new(value)\nend"}},{"id":"diag_view-instance-method","html_id":"diag_view-instance-method","name":"diag_view","doc":"Returns a view of the diagonal of a `Tensor`  only valid if\nthe `Tensor` has two dimensions.  Offsets are not supported.\n\n```\nt = Tensor.new([3, 3]) { |i| i }\nt.diag_view # => Tensor([0, 4, 8])","summary":"<p>Returns a view of the diagonal of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>  only valid if the <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> has two dimensions.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L483","def":{"name":"diag_view","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ndims == 2\nelse\n  raise(\"Tensor must be two-dimensional\")\nend\nnel = Math.min(@shape[0], @shape[1])\nnewshape = [nel]\nnewstrides = [@strides[0] + @strides[1]]\nnewflags = @flags.dup\nnewbase = @base ? @base : @buffer\nret = Tensor(T).new(@buffer, newshape, newstrides, newflags, newbase)\nret.update_flags(ArrayFlags::Fortran | ArrayFlags::Contiguous)\nret\n"}},{"id":"dup(f:ArrayFlags=ArrayFlags::None)-instance-method","html_id":"dup(f:ArrayFlags=ArrayFlags::None)-instance-method","name":"dup","doc":"Duplicates a `Tensor`, respecting the passed order of memory\nprovided.  Useful for throwing `Tensor`s down to LAPACK\nsince they must be in Fortran style order, and this\navoids the copy if they are.\n\n```\nt = B.arange(5)\nt.dup # => Tensor([0, 1, 2, 3, 4])\n```","summary":"<p>Duplicates a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>, respecting the passed order of memory provided.</p>","abstract":false,"args":[{"name":"f","doc":null,"default_value":"ArrayFlags::None","external_name":"f","restriction":"ArrayFlags"}],"args_string":"(f : ArrayFlags = <span class=\"t\">ArrayFlags</span><span class=\"t\">::</span><span class=\"t\">None</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L431","def":{"name":"dup","args":[{"name":"f","doc":null,"default_value":"ArrayFlags::None","external_name":"f","restriction":"ArrayFlags"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ret = Tensor(T).new(@shape)\nnewcontig = f & (ArrayFlags::Fortran | ArrayFlags::Contiguous)\ncontig = @flags & (ArrayFlags::Fortran | ArrayFlags::Contiguous)\nif (contig != ArrayFlags::None) && ((newcontig == 0) || (contig == newcontig))\n  @buffer.copy_to(ret.@buffer, size)\nelse\n  if ret.size\n    if newcontig != (ret.flags & (ArrayFlags::Fortran | ArrayFlags::Contiguous))\n      flat_iter.zip(ret.flat_iter) do |i, j|\n        j.value = i.value\n      end\n      newstrides = ret.size\n      ndims.times do |i|\n        newstrides = newstrides // shape[i]\n        (ret.@strides)[i] = newstrides\n      end\n    else\n      trans_iter.zip(ret.flat_iter) do |i, j|\n        j.value = i.value\n      end\n    end\n  end\nend\nret.update_flags(ArrayFlags::Fortran | ArrayFlags::Contiguous)\nret\n"}},{"id":"dup_view-instance-method","html_id":"dup_view-instance-method","name":"dup_view","doc":"Shallow copies the `Tensor`.  Shape and strides are copied, but\nthe underlying data is not.  The returned `Tensor` does\nnot own its own data, and its base reflects that.","summary":"<p>Shallow copies the <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L469","def":{"name":"dup_view","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"newshape = @shape.dup\nnewstrides = @strides.dup\nnewflags = @flags.dup\nnewflags = newflags & (~ArrayFlags::OwnData)\nTensor(T).new(@buffer, newshape, newstrides, newflags, @buffer)\n"}},{"id":"flags:ArrayFlags-instance-method","html_id":"flags:ArrayFlags-instance-method","name":"flags","doc":"Flags describing the memory layout of the array","summary":"<p>Flags describing the memory layout of the array</p>","abstract":false,"args":[],"args_string":" : ArrayFlags","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L53","def":{"name":"flags","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ArrayFlags","visibility":"Public","body":"@flags"}},{"id":"flat_iter-instance-method","html_id":"flat_iter-instance-method","name":"flat_iter","doc":"Returns a safe flattened view of the `Tensor.  This method will\nraise `STOPITERATION` when the elements of the `Tensor`\nhave been exhausted.","summary":"<p>Returns a safe flattened view of the `Tensor.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L216","def":{"name":"flat_iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"FlatIter.new(self)"}},{"id":"is_contiguous-instance-method","html_id":"is_contiguous-instance-method","name":"is_contiguous","doc":"Asserts if a `Tensor` is c contiguous, otherwise known\nas stored in row major order.  This is the default memory\nstorage for NDArray","summary":"<p>Asserts if a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> is c contiguous, otherwise known as stored in row major order.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L525","def":{"name":"is_contiguous","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ndims != 0\nelse\n  return true\nend\nif ndims == 1\n  return (@shape[0] == 1) || (@strides[0] == 1)\nend\nsd = 1\n(ndims - 1).step(to: 0, by: -1) do |i|\n  dim = @shape[i]\n  if dim != 0\n  else\n    return true\n  end\n  if @strides[i] == sd\n  else\n    return false\n  end\n  sd = sd * dim\nend\ntrue\n"}},{"id":"is_fortran_contiguous-instance-method","html_id":"is_fortran_contiguous-instance-method","name":"is_fortran_contiguous","doc":"Asserts if a `Tensor` is fortran contiguous, otherwise known\nas stored in column major order.  This is not the default\nlayout for `Tensor`'s, but can provide performance benefits\nwhen passing to LaPACK routines since otherwise the\n`Tensor` must be transposed in memory.","summary":"<p>Asserts if a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> is fortran contiguous, otherwise known as stored in column major order.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L500","def":{"name":"is_fortran_contiguous","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ndims != 0\nelse\n  return true\nend\nif ndims == 1\n  return (@shape[0] == 1) || (strides[0] == 1)\nend\nsd = 1\nndims.times do |i|\n  dim = @shape[i]\n  if dim != 0\n  else\n    return true\n  end\n  if @strides[i] == sd\n  else\n    return false\n  end\n  sd = sd * dim\nend\ntrue\n"}},{"id":"matrix_iter-instance-method","html_id":"matrix_iter-instance-method","name":"matrix_iter","doc":"Iterates along the final two axes of a `Tensor`, useful\nfor matrix operations on n-dimensional Tensors.","summary":"<p>Iterates along the final two axes of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>, useful for matrix operations on n-dimensional Tensors.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L755","def":{"name":"matrix_iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"MatrixIter.new(self)"}},{"id":"max-instance-method","html_id":"max-instance-method","name":"max","doc":"Compuates the maximum value of a `Tensor`","summary":"<p>Compuates the maximum value of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L864","def":{"name":"max","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::Statistics.max(self)"}},{"id":"nbytes-instance-method","html_id":"nbytes-instance-method","name":"nbytes","doc":"Total number of bytes taken up by items in the `Tensor`s\ndata buffer.","summary":"<p>Total number of bytes taken up by items in the <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>s data buffer.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L761","def":{"name":"nbytes","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size * (sizeof(T))"}},{"id":"ndims:Int32-instance-method","html_id":"ndims:Int32-instance-method","name":"ndims","doc":"Integer representing the number of dimensions of a `Tensor`","summary":"<p>Integer representing the number of dimensions of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L50","def":{"name":"ndims","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@ndims"}},{"id":"ptr_at(idx:Array(Int32))-instance-method","html_id":"ptr_at(idx:Array(Int32))-instance-method","name":"ptr_at","doc":"Calculate the offset of an element in the `Tensor` from\na provided index and the strides of the `Tensor`","summary":"<p>Calculate the offset of an element in the <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> from a provided index and the strides of the <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array(Int32)"}],"args_string":"(idx : Array(Int32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L238","def":{"name":"ptr_at","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array(Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ptr = @buffer\nstrides.zip(idx) do |i, j|\n  ptr = ptr + (i * j)\nend\nptr\n"}},{"id":"reduce_along_axis(axis,&block)-instance-method","html_id":"reduce_along_axis(axis,&amp;block)-instance-method","name":"reduce_along_axis","doc":null,"summary":null,"abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"args_string":"(axis, &block)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L729","def":{"name":"reduce_along_axis","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":""}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":null,"return_type":"","visibility":"Public","body":"if axis < 0\n  axis = ndims + axis\nend\nif axis < ndims\nelse\n  raise(\"Axis out of range for Tensor\")\nend\nidx0 = [0] * ndims\nidx1 = shape.dup\nidx1[axis] = 0\nranges = (idx0.zip(idx1)).map_with_index do |i, idx|\n  idx == axis ? 0 : i[0]...i[1]\nend\nret = (slice(ranges)).dup\n1.step(to: shape[axis] - 1) do |i|\n  ranges[axis] = i\n  (slice(ranges)).flat_iter.zip(ret.flat_iter) do |ii, jj|\n    yield ii, jj\n  end\nend\nret\n"}},{"id":"reshape(newshape:Array(Int32))-instance-method","html_id":"reshape(newshape:Array(Int32))-instance-method","name":"reshape","doc":"Fits a `Tensor` into a new shape, not\naltering memory if possible.  However, the `Tensor` is\nusually copied.\n\n```\nt = Tensor.new([2, 4, 3]])\n\nt.reshape([2, 2, 2, 3]) # =>\nTensor([[[[ 0,  1,  2],\n          [ 6,  7,  8]],\n\n         [[ 3,  4,  5],\n          [ 9, 10, 11]]],\n\n\n        [[[12, 13, 14],\n          [18, 19, 20]],\n\n         [[15, 16, 17],\n          [21, 22, 23]]]])\n```","summary":"<p>Fits a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> into a new shape, not altering memory if possible.</p>","abstract":false,"args":[{"name":"newshape","doc":null,"default_value":"","external_name":"newshape","restriction":"Array(Int32)"}],"args_string":"(newshape : Array(Int32))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L602","def":{"name":"reshape","args":[{"name":"newshape","doc":null,"default_value":"","external_name":"newshape","restriction":"Array(Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if newshape == @shape\n  return self\nend\nnewsize = 1\ncur_size = size\nautosize = -1\nnewshape.each_with_index do |val, i|\n  if val < 0\n    if autosize >= 0\n      raise(\"Only shape dimension can be automatic\")\n    end\n    autosize = i\n  else\n    newsize = newsize * val\n  end\nend\nif autosize >= 0\n  newshape = newshape.dup\n  newshape[autosize] = newsize // cur_size\n  newsize = newsize * newshape[autosize]\nend\nif newsize != cur_size\n  raise(\"Shapes #{@shape} cannot be reshaped to #{newshape}\")\nend\nstride = uninitialized Int32\nnewstrides = [0] * newshape.size\nnewbase = @base ? @base : @buffer\nnewdims = newshape.size\nif @flags & ArrayFlags::Contiguous\n  stride = 1\n  newdims.times do |i|\n    newstrides[(newdims - i) - 1] = stride\n    stride = stride * newshape[(newdims - i) - 1]\n  end\nelse\n  stride = 1\n  newshape.each_with_index do |d, i|\n    newstrides[i] = stride\n    stride = stride * d\n  end\nend\nif @flags & (ArrayFlags::Fortran | ArrayFlags::Contiguous)\n  ret = Tensor(T).new(@buffer, newshape, newstrides, @flags.dup, newbase)\n  ret.update_flags(ArrayFlags::Fortran | ArrayFlags::Contiguous)\n  ret\nelse\n  tmp = self.dup\n  ret = Tensor(T).new(tmp.@buffer, newshape, newstrides, @flags.dup, nil)\n  ret.update_flags(ArrayFlags::Fortran | ArrayFlags::Contiguous)\n  ret\nend\n"}},{"id":"shape:Array(Int32)-instance-method","html_id":"shape:Array(Int32)-instance-method","name":"shape","doc":"Array-like container holding the dimensions of a `Tensor`","summary":"<p>Array-like container holding the dimensions of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[],"args_string":" : Array(Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L44","def":{"name":"shape","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32)","visibility":"Public","body":"@shape"}},{"id":"size:Int32-instance-method","html_id":"size:Int32-instance-method","name":"size","doc":"The total number of elements contained in a `Tensor`","summary":"<p>The total number of elements contained in a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L56","def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@size"}},{"id":"slice(idx:Array(Int32|Range(Int32,Int32)))-instance-method","html_id":"slice(idx:Array(Int32|Range(Int32,Int32)))-instance-method","name":"slice","doc":"Slices a `Tensor` from an array of integers or ranges\nPrimarily used when you can't pass *args to the index\nmethod but still need the functionality.\n\n```\nt = Tensor.new([2, 2, 3]) { |i| i }\nt.slice([0, 0...1, 0...2]) #=>\nTensor([[0, 1]])\n```","summary":"<p>Slices a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> from an array of integers or ranges Primarily used when you can't pass *args to the index method but still need the functionality.</p>","abstract":false,"args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array(Int32 | Range(Int32, Int32))"}],"args_string":"(idx : Array(Int32 | Range(Int32, Int32)))","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L418","def":{"name":"slice","args":[{"name":"idx","doc":null,"default_value":"","external_name":"idx","restriction":"Array(Int32 | Range(Int32, Int32))"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"slice_from_indexers(idx)"}},{"id":"strides:Array(Int32)-instance-method","html_id":"strides:Array(Int32)-instance-method","name":"strides","doc":"Array-like container holding the strides of a `Tensor`","summary":"<p>Array-like container holding the strides of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code></p>","abstract":false,"args":[],"args_string":" : Array(Int32)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L47","def":{"name":"strides","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32)","visibility":"Public","body":"@strides"}},{"id":"sum-instance-method","html_id":"sum-instance-method","name":"sum","doc":"Computes the sum of each value of a Tensor\n\n```\nv = Tensor.new [1, 2, 3, 4]\nv.sum # => 10\n```","summary":"<p>Computes the sum of each value of a Tensor</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L859","def":{"name":"sum","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Bottle::Internal::Statistics.sum(self)"}},{"id":"to_s(io)-instance-method","html_id":"to_s(io)-instance-method","name":"to_s","doc":"Creates a string representation of a `Tensor`.  The implementation\nof this is a bit of a mess, but I am happy with the results currently,\nit could however be cleaned up to handle long floating point values\nmore precisely.","summary":"<p>Creates a string representation of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"args_string":"(io)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L250","def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"printer = ToString::TensorPrint.new(self, io)\nprinter.print\n"}},{"id":"trans_iter-instance-method","html_id":"trans_iter-instance-method","name":"trans_iter","doc":"Returns a safe transposed view of the `Tensor`.  Primarily\nuseful for swapping memory layout of an array in the duplication\nroutine.","summary":"<p>Returns a safe transposed view of the <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L223","def":{"name":"trans_iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ContigIter.new(self, transpose: true)"}},{"id":"transpose(order:Array(Int32)=[]ofInt32)-instance-method","html_id":"transpose(order:Array(Int32)=[]ofInt32)-instance-method","name":"transpose","doc":"Permute the dimensions of a `Tensor`.  If no order is provided,\nthe dimensions will be reversed, a \"true transpose\".  Otherwise,\nthe dimensions will be permutated in the order provided.\n\n```\nt = Tensor.new([2, 4, 3]) { |i| i }\nt.transpose([2, 0, 1])\nTensor([[[ 0,  3,  6,  9],\n         [12, 15, 18, 21]],\n\n        [[ 1,  4,  7, 10],\n         [13, 16, 19, 22]],\n\n        [[ 2,  5,  8, 11],\n         [14, 17, 20, 23]]])\n```","summary":"<p>Permute the dimensions of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code>.</p>","abstract":false,"args":[{"name":"order","doc":null,"default_value":"[] of Int32","external_name":"order","restriction":"Array(Int32)"}],"args_string":"(order : Array(Int32) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>)","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L677","def":{"name":"transpose","args":[{"name":"order","doc":null,"default_value":"[] of Int32","external_name":"order","restriction":"Array(Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"newshape = @shape.dup\nnewstrides = @strides.dup\nnewbase = @base ? @base : @buffer\nif order.size == 0\n  0.step(to: ndims / 2) do |i|\n    offset = (ndims - i) - 1\n    tmp = newstrides[offset]\n    newstrides[offset] = newstrides[i]\n    newstrides[i] = tmp\n    tmp = newshape[offset]\n    newshape[offset] = newshape[i]\n    newshape[i] = tmp\n  end\nelse\n  n = order.size\n  if n != ndims\n    raise(\"Axes don't match array\")\n  end\n  permutation = [0] * 32\n  reverse_permutation = [0] * 32\n  n.times do |i|\n    reverse_permutation[i] = -1\n  end\n  n.times do |i|\n    axis = order[i]\n    if axis < 0\n      axis = ndims + axis\n    end\n    if axis < 0 || axis >= ndims\n      raise(\"Invalid axis for this array\")\n    end\n    if reverse_permutation[axis] != -1\n      raise(\"Repeated axis in transpose\")\n    end\n    reverse_permutation[axis] = i\n    permutation[i] = axis\n  end\n  n.times do |i|\n    newshape[i] = @shape[permutation[i]]\n    newstrides[i] = strides[permutation[i]]\n  end\nend\nret = Tensor(T).new(@buffer, newshape, newstrides, @flags.dup, newbase)\nret.update_flags(ArrayFlags::Contiguous | ArrayFlags::Fortran)\nret\n"}},{"id":"unsafe_iter-instance-method","html_id":"unsafe_iter-instance-method","name":"unsafe_iter","doc":"Returns an unsafe iter that does no bounds checking, but instead\nkeeps incrementing the data pointer of a `Tensor` indefinitely.\n\nUseful for fast iteration in internal methods, but is highly\nunsafe for external API use.","summary":"<p>Returns an unsafe iter that does no bounds checking, but instead keeps incrementing the data pointer of a <code><a href=\"../Bottle/Tensor.html\">Tensor</a></code> indefinitely.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/crystal-data/bottle/blob/2154701c4fb92fdb37258362accc276a568d0f89/src/core/ndtensor.cr#L232","def":{"name":"unsafe_iter","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"UnsafeIter.new(self)"}}],"macros":[],"types":[]}]}]}})